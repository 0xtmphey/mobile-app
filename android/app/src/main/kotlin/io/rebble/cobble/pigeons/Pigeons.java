// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.rebble.cobble.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeons {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BooleanWrapper {
    private @Nullable Boolean value;
    public @Nullable Boolean getValue() { return value; }
    public void setValue(@Nullable Boolean setterArg) {
      this.value = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean value;
      public @NonNull Builder setValue(@Nullable Boolean setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull BooleanWrapper build() {
        BooleanWrapper pigeonReturn = new BooleanWrapper();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull BooleanWrapper fromMap(@NonNull Map<String, Object> map) {
      BooleanWrapper pigeonResult = new BooleanWrapper();
      Object value = map.get("value");
      pigeonResult.setValue((Boolean)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NumberWrapper {
    private @Nullable Long value;
    public @Nullable Long getValue() { return value; }
    public void setValue(@Nullable Long setterArg) {
      this.value = setterArg;
    }

    public static class Builder {
      private @Nullable Long value;
      public @NonNull Builder setValue(@Nullable Long setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull NumberWrapper build() {
        NumberWrapper pigeonReturn = new NumberWrapper();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull NumberWrapper fromMap(@NonNull Map<String, Object> map) {
      NumberWrapper pigeonResult = new NumberWrapper();
      Object value = map.get("value");
      pigeonResult.setValue((value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringWrapper {
    private @Nullable String value;
    public @Nullable String getValue() { return value; }
    public void setValue(@Nullable String setterArg) {
      this.value = setterArg;
    }

    public static class Builder {
      private @Nullable String value;
      public @NonNull Builder setValue(@Nullable String setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull StringWrapper build() {
        StringWrapper pigeonReturn = new StringWrapper();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull StringWrapper fromMap(@NonNull Map<String, Object> map) {
      StringWrapper pigeonResult = new StringWrapper();
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ListWrapper {
    private @Nullable List<Object> value;
    public @Nullable List<Object> getValue() { return value; }
    public void setValue(@Nullable List<Object> setterArg) {
      this.value = setterArg;
    }

    public static class Builder {
      private @Nullable List<Object> value;
      public @NonNull Builder setValue(@Nullable List<Object> setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull ListWrapper build() {
        ListWrapper pigeonReturn = new ListWrapper();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull ListWrapper fromMap(@NonNull Map<String, Object> map) {
      ListWrapper pigeonResult = new ListWrapper();
      Object value = map.get("value");
      pigeonResult.setValue((List<Object>)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleFirmwarePigeon {
    private @Nullable Long timestamp;
    public @Nullable Long getTimestamp() { return timestamp; }
    public void setTimestamp(@Nullable Long setterArg) {
      this.timestamp = setterArg;
    }

    private @Nullable String version;
    public @Nullable String getVersion() { return version; }
    public void setVersion(@Nullable String setterArg) {
      this.version = setterArg;
    }

    private @Nullable String gitHash;
    public @Nullable String getGitHash() { return gitHash; }
    public void setGitHash(@Nullable String setterArg) {
      this.gitHash = setterArg;
    }

    private @Nullable Boolean isRecovery;
    public @Nullable Boolean getIsRecovery() { return isRecovery; }
    public void setIsRecovery(@Nullable Boolean setterArg) {
      this.isRecovery = setterArg;
    }

    private @Nullable Long hardwarePlatform;
    public @Nullable Long getHardwarePlatform() { return hardwarePlatform; }
    public void setHardwarePlatform(@Nullable Long setterArg) {
      this.hardwarePlatform = setterArg;
    }

    private @Nullable Long metadataVersion;
    public @Nullable Long getMetadataVersion() { return metadataVersion; }
    public void setMetadataVersion(@Nullable Long setterArg) {
      this.metadataVersion = setterArg;
    }

    public static class Builder {
      private @Nullable Long timestamp;
      public @NonNull Builder setTimestamp(@Nullable Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }
      private @Nullable String version;
      public @NonNull Builder setVersion(@Nullable String setterArg) {
        this.version = setterArg;
        return this;
      }
      private @Nullable String gitHash;
      public @NonNull Builder setGitHash(@Nullable String setterArg) {
        this.gitHash = setterArg;
        return this;
      }
      private @Nullable Boolean isRecovery;
      public @NonNull Builder setIsRecovery(@Nullable Boolean setterArg) {
        this.isRecovery = setterArg;
        return this;
      }
      private @Nullable Long hardwarePlatform;
      public @NonNull Builder setHardwarePlatform(@Nullable Long setterArg) {
        this.hardwarePlatform = setterArg;
        return this;
      }
      private @Nullable Long metadataVersion;
      public @NonNull Builder setMetadataVersion(@Nullable Long setterArg) {
        this.metadataVersion = setterArg;
        return this;
      }
      public @NonNull PebbleFirmwarePigeon build() {
        PebbleFirmwarePigeon pigeonReturn = new PebbleFirmwarePigeon();
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setVersion(version);
        pigeonReturn.setGitHash(gitHash);
        pigeonReturn.setIsRecovery(isRecovery);
        pigeonReturn.setHardwarePlatform(hardwarePlatform);
        pigeonReturn.setMetadataVersion(metadataVersion);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("timestamp", timestamp);
      toMapResult.put("version", version);
      toMapResult.put("gitHash", gitHash);
      toMapResult.put("isRecovery", isRecovery);
      toMapResult.put("hardwarePlatform", hardwarePlatform);
      toMapResult.put("metadataVersion", metadataVersion);
      return toMapResult;
    }
    static @NonNull PebbleFirmwarePigeon fromMap(@NonNull Map<String, Object> map) {
      PebbleFirmwarePigeon pigeonResult = new PebbleFirmwarePigeon();
      Object timestamp = map.get("timestamp");
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp));
      Object version = map.get("version");
      pigeonResult.setVersion((String)version);
      Object gitHash = map.get("gitHash");
      pigeonResult.setGitHash((String)gitHash);
      Object isRecovery = map.get("isRecovery");
      pigeonResult.setIsRecovery((Boolean)isRecovery);
      Object hardwarePlatform = map.get("hardwarePlatform");
      pigeonResult.setHardwarePlatform((hardwarePlatform == null) ? null : ((hardwarePlatform instanceof Integer) ? (Integer)hardwarePlatform : (Long)hardwarePlatform));
      Object metadataVersion = map.get("metadataVersion");
      pigeonResult.setMetadataVersion((metadataVersion == null) ? null : ((metadataVersion instanceof Integer) ? (Integer)metadataVersion : (Long)metadataVersion));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleDevicePigeon {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String address;
    public @Nullable String getAddress() { return address; }
    public void setAddress(@Nullable String setterArg) {
      this.address = setterArg;
    }

    private @Nullable PebbleFirmwarePigeon runningFirmware;
    public @Nullable PebbleFirmwarePigeon getRunningFirmware() { return runningFirmware; }
    public void setRunningFirmware(@Nullable PebbleFirmwarePigeon setterArg) {
      this.runningFirmware = setterArg;
    }

    private @Nullable PebbleFirmwarePigeon recoveryFirmware;
    public @Nullable PebbleFirmwarePigeon getRecoveryFirmware() { return recoveryFirmware; }
    public void setRecoveryFirmware(@Nullable PebbleFirmwarePigeon setterArg) {
      this.recoveryFirmware = setterArg;
    }

    private @Nullable Long model;
    public @Nullable Long getModel() { return model; }
    public void setModel(@Nullable Long setterArg) {
      this.model = setterArg;
    }

    private @Nullable Long bootloaderTimestamp;
    public @Nullable Long getBootloaderTimestamp() { return bootloaderTimestamp; }
    public void setBootloaderTimestamp(@Nullable Long setterArg) {
      this.bootloaderTimestamp = setterArg;
    }

    private @Nullable String board;
    public @Nullable String getBoard() { return board; }
    public void setBoard(@Nullable String setterArg) {
      this.board = setterArg;
    }

    private @Nullable String serial;
    public @Nullable String getSerial() { return serial; }
    public void setSerial(@Nullable String setterArg) {
      this.serial = setterArg;
    }

    private @Nullable String language;
    public @Nullable String getLanguage() { return language; }
    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    private @Nullable Long languageVersion;
    public @Nullable Long getLanguageVersion() { return languageVersion; }
    public void setLanguageVersion(@Nullable Long setterArg) {
      this.languageVersion = setterArg;
    }

    private @Nullable Boolean isUnfaithful;
    public @Nullable Boolean getIsUnfaithful() { return isUnfaithful; }
    public void setIsUnfaithful(@Nullable Boolean setterArg) {
      this.isUnfaithful = setterArg;
    }

    public static class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String address;
      public @NonNull Builder setAddress(@Nullable String setterArg) {
        this.address = setterArg;
        return this;
      }
      private @Nullable PebbleFirmwarePigeon runningFirmware;
      public @NonNull Builder setRunningFirmware(@Nullable PebbleFirmwarePigeon setterArg) {
        this.runningFirmware = setterArg;
        return this;
      }
      private @Nullable PebbleFirmwarePigeon recoveryFirmware;
      public @NonNull Builder setRecoveryFirmware(@Nullable PebbleFirmwarePigeon setterArg) {
        this.recoveryFirmware = setterArg;
        return this;
      }
      private @Nullable Long model;
      public @NonNull Builder setModel(@Nullable Long setterArg) {
        this.model = setterArg;
        return this;
      }
      private @Nullable Long bootloaderTimestamp;
      public @NonNull Builder setBootloaderTimestamp(@Nullable Long setterArg) {
        this.bootloaderTimestamp = setterArg;
        return this;
      }
      private @Nullable String board;
      public @NonNull Builder setBoard(@Nullable String setterArg) {
        this.board = setterArg;
        return this;
      }
      private @Nullable String serial;
      public @NonNull Builder setSerial(@Nullable String setterArg) {
        this.serial = setterArg;
        return this;
      }
      private @Nullable String language;
      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }
      private @Nullable Long languageVersion;
      public @NonNull Builder setLanguageVersion(@Nullable Long setterArg) {
        this.languageVersion = setterArg;
        return this;
      }
      private @Nullable Boolean isUnfaithful;
      public @NonNull Builder setIsUnfaithful(@Nullable Boolean setterArg) {
        this.isUnfaithful = setterArg;
        return this;
      }
      public @NonNull PebbleDevicePigeon build() {
        PebbleDevicePigeon pigeonReturn = new PebbleDevicePigeon();
        pigeonReturn.setName(name);
        pigeonReturn.setAddress(address);
        pigeonReturn.setRunningFirmware(runningFirmware);
        pigeonReturn.setRecoveryFirmware(recoveryFirmware);
        pigeonReturn.setModel(model);
        pigeonReturn.setBootloaderTimestamp(bootloaderTimestamp);
        pigeonReturn.setBoard(board);
        pigeonReturn.setSerial(serial);
        pigeonReturn.setLanguage(language);
        pigeonReturn.setLanguageVersion(languageVersion);
        pigeonReturn.setIsUnfaithful(isUnfaithful);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("address", address);
      toMapResult.put("runningFirmware", (runningFirmware == null) ? null : runningFirmware.toMap());
      toMapResult.put("recoveryFirmware", (recoveryFirmware == null) ? null : recoveryFirmware.toMap());
      toMapResult.put("model", model);
      toMapResult.put("bootloaderTimestamp", bootloaderTimestamp);
      toMapResult.put("board", board);
      toMapResult.put("serial", serial);
      toMapResult.put("language", language);
      toMapResult.put("languageVersion", languageVersion);
      toMapResult.put("isUnfaithful", isUnfaithful);
      return toMapResult;
    }
    static @NonNull PebbleDevicePigeon fromMap(@NonNull Map<String, Object> map) {
      PebbleDevicePigeon pigeonResult = new PebbleDevicePigeon();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object address = map.get("address");
      pigeonResult.setAddress((String)address);
      Object runningFirmware = map.get("runningFirmware");
      pigeonResult.setRunningFirmware(PebbleFirmwarePigeon.fromMap((Map)runningFirmware));
      Object recoveryFirmware = map.get("recoveryFirmware");
      pigeonResult.setRecoveryFirmware(PebbleFirmwarePigeon.fromMap((Map)recoveryFirmware));
      Object model = map.get("model");
      pigeonResult.setModel((model == null) ? null : ((model instanceof Integer) ? (Integer)model : (Long)model));
      Object bootloaderTimestamp = map.get("bootloaderTimestamp");
      pigeonResult.setBootloaderTimestamp((bootloaderTimestamp == null) ? null : ((bootloaderTimestamp instanceof Integer) ? (Integer)bootloaderTimestamp : (Long)bootloaderTimestamp));
      Object board = map.get("board");
      pigeonResult.setBoard((String)board);
      Object serial = map.get("serial");
      pigeonResult.setSerial((String)serial);
      Object language = map.get("language");
      pigeonResult.setLanguage((String)language);
      Object languageVersion = map.get("languageVersion");
      pigeonResult.setLanguageVersion((languageVersion == null) ? null : ((languageVersion instanceof Integer) ? (Integer)languageVersion : (Long)languageVersion));
      Object isUnfaithful = map.get("isUnfaithful");
      pigeonResult.setIsUnfaithful((Boolean)isUnfaithful);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PebbleScanDevicePigeon {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String address;
    public @Nullable String getAddress() { return address; }
    public void setAddress(@Nullable String setterArg) {
      this.address = setterArg;
    }

    private @Nullable String version;
    public @Nullable String getVersion() { return version; }
    public void setVersion(@Nullable String setterArg) {
      this.version = setterArg;
    }

    private @Nullable String serialNumber;
    public @Nullable String getSerialNumber() { return serialNumber; }
    public void setSerialNumber(@Nullable String setterArg) {
      this.serialNumber = setterArg;
    }

    private @Nullable Long color;
    public @Nullable Long getColor() { return color; }
    public void setColor(@Nullable Long setterArg) {
      this.color = setterArg;
    }

    private @Nullable Boolean runningPRF;
    public @Nullable Boolean getRunningPRF() { return runningPRF; }
    public void setRunningPRF(@Nullable Boolean setterArg) {
      this.runningPRF = setterArg;
    }

    private @Nullable Boolean firstUse;
    public @Nullable Boolean getFirstUse() { return firstUse; }
    public void setFirstUse(@Nullable Boolean setterArg) {
      this.firstUse = setterArg;
    }

    public static class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String address;
      public @NonNull Builder setAddress(@Nullable String setterArg) {
        this.address = setterArg;
        return this;
      }
      private @Nullable String version;
      public @NonNull Builder setVersion(@Nullable String setterArg) {
        this.version = setterArg;
        return this;
      }
      private @Nullable String serialNumber;
      public @NonNull Builder setSerialNumber(@Nullable String setterArg) {
        this.serialNumber = setterArg;
        return this;
      }
      private @Nullable Long color;
      public @NonNull Builder setColor(@Nullable Long setterArg) {
        this.color = setterArg;
        return this;
      }
      private @Nullable Boolean runningPRF;
      public @NonNull Builder setRunningPRF(@Nullable Boolean setterArg) {
        this.runningPRF = setterArg;
        return this;
      }
      private @Nullable Boolean firstUse;
      public @NonNull Builder setFirstUse(@Nullable Boolean setterArg) {
        this.firstUse = setterArg;
        return this;
      }
      public @NonNull PebbleScanDevicePigeon build() {
        PebbleScanDevicePigeon pigeonReturn = new PebbleScanDevicePigeon();
        pigeonReturn.setName(name);
        pigeonReturn.setAddress(address);
        pigeonReturn.setVersion(version);
        pigeonReturn.setSerialNumber(serialNumber);
        pigeonReturn.setColor(color);
        pigeonReturn.setRunningPRF(runningPRF);
        pigeonReturn.setFirstUse(firstUse);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("address", address);
      toMapResult.put("version", version);
      toMapResult.put("serialNumber", serialNumber);
      toMapResult.put("color", color);
      toMapResult.put("runningPRF", runningPRF);
      toMapResult.put("firstUse", firstUse);
      return toMapResult;
    }
    static @NonNull PebbleScanDevicePigeon fromMap(@NonNull Map<String, Object> map) {
      PebbleScanDevicePigeon pigeonResult = new PebbleScanDevicePigeon();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object address = map.get("address");
      pigeonResult.setAddress((String)address);
      Object version = map.get("version");
      pigeonResult.setVersion((String)version);
      Object serialNumber = map.get("serialNumber");
      pigeonResult.setSerialNumber((String)serialNumber);
      Object color = map.get("color");
      pigeonResult.setColor((color == null) ? null : ((color instanceof Integer) ? (Integer)color : (Long)color));
      Object runningPRF = map.get("runningPRF");
      pigeonResult.setRunningPRF((Boolean)runningPRF);
      Object firstUse = map.get("firstUse");
      pigeonResult.setFirstUse((Boolean)firstUse);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchConnectionStatePigeon {
    private @Nullable Boolean isConnected;
    public @Nullable Boolean getIsConnected() { return isConnected; }
    public void setIsConnected(@Nullable Boolean setterArg) {
      this.isConnected = setterArg;
    }

    private @Nullable Boolean isConnecting;
    public @Nullable Boolean getIsConnecting() { return isConnecting; }
    public void setIsConnecting(@Nullable Boolean setterArg) {
      this.isConnecting = setterArg;
    }

    private @Nullable String currentWatchAddress;
    public @Nullable String getCurrentWatchAddress() { return currentWatchAddress; }
    public void setCurrentWatchAddress(@Nullable String setterArg) {
      this.currentWatchAddress = setterArg;
    }

    private @Nullable PebbleDevicePigeon currentConnectedWatch;
    public @Nullable PebbleDevicePigeon getCurrentConnectedWatch() { return currentConnectedWatch; }
    public void setCurrentConnectedWatch(@Nullable PebbleDevicePigeon setterArg) {
      this.currentConnectedWatch = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean isConnected;
      public @NonNull Builder setIsConnected(@Nullable Boolean setterArg) {
        this.isConnected = setterArg;
        return this;
      }
      private @Nullable Boolean isConnecting;
      public @NonNull Builder setIsConnecting(@Nullable Boolean setterArg) {
        this.isConnecting = setterArg;
        return this;
      }
      private @Nullable String currentWatchAddress;
      public @NonNull Builder setCurrentWatchAddress(@Nullable String setterArg) {
        this.currentWatchAddress = setterArg;
        return this;
      }
      private @Nullable PebbleDevicePigeon currentConnectedWatch;
      public @NonNull Builder setCurrentConnectedWatch(@Nullable PebbleDevicePigeon setterArg) {
        this.currentConnectedWatch = setterArg;
        return this;
      }
      public @NonNull WatchConnectionStatePigeon build() {
        WatchConnectionStatePigeon pigeonReturn = new WatchConnectionStatePigeon();
        pigeonReturn.setIsConnected(isConnected);
        pigeonReturn.setIsConnecting(isConnecting);
        pigeonReturn.setCurrentWatchAddress(currentWatchAddress);
        pigeonReturn.setCurrentConnectedWatch(currentConnectedWatch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isConnected", isConnected);
      toMapResult.put("isConnecting", isConnecting);
      toMapResult.put("currentWatchAddress", currentWatchAddress);
      toMapResult.put("currentConnectedWatch", (currentConnectedWatch == null) ? null : currentConnectedWatch.toMap());
      return toMapResult;
    }
    static @NonNull WatchConnectionStatePigeon fromMap(@NonNull Map<String, Object> map) {
      WatchConnectionStatePigeon pigeonResult = new WatchConnectionStatePigeon();
      Object isConnected = map.get("isConnected");
      pigeonResult.setIsConnected((Boolean)isConnected);
      Object isConnecting = map.get("isConnecting");
      pigeonResult.setIsConnecting((Boolean)isConnecting);
      Object currentWatchAddress = map.get("currentWatchAddress");
      pigeonResult.setCurrentWatchAddress((String)currentWatchAddress);
      Object currentConnectedWatch = map.get("currentConnectedWatch");
      pigeonResult.setCurrentConnectedWatch(PebbleDevicePigeon.fromMap((Map)currentConnectedWatch));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TimelinePinPigeon {
    private @Nullable String itemId;
    public @Nullable String getItemId() { return itemId; }
    public void setItemId(@Nullable String setterArg) {
      this.itemId = setterArg;
    }

    private @Nullable String parentId;
    public @Nullable String getParentId() { return parentId; }
    public void setParentId(@Nullable String setterArg) {
      this.parentId = setterArg;
    }

    private @Nullable Long timestamp;
    public @Nullable Long getTimestamp() { return timestamp; }
    public void setTimestamp(@Nullable Long setterArg) {
      this.timestamp = setterArg;
    }

    private @Nullable Long type;
    public @Nullable Long getType() { return type; }
    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Boolean isVisible;
    public @Nullable Boolean getIsVisible() { return isVisible; }
    public void setIsVisible(@Nullable Boolean setterArg) {
      this.isVisible = setterArg;
    }

    private @Nullable Boolean isFloating;
    public @Nullable Boolean getIsFloating() { return isFloating; }
    public void setIsFloating(@Nullable Boolean setterArg) {
      this.isFloating = setterArg;
    }

    private @Nullable Boolean isAllDay;
    public @Nullable Boolean getIsAllDay() { return isAllDay; }
    public void setIsAllDay(@Nullable Boolean setterArg) {
      this.isAllDay = setterArg;
    }

    private @Nullable Boolean persistQuickView;
    public @Nullable Boolean getPersistQuickView() { return persistQuickView; }
    public void setPersistQuickView(@Nullable Boolean setterArg) {
      this.persistQuickView = setterArg;
    }

    private @Nullable Long layout;
    public @Nullable Long getLayout() { return layout; }
    public void setLayout(@Nullable Long setterArg) {
      this.layout = setterArg;
    }

    private @Nullable String attributesJson;
    public @Nullable String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(@Nullable String setterArg) {
      this.attributesJson = setterArg;
    }

    private @Nullable String actionsJson;
    public @Nullable String getActionsJson() { return actionsJson; }
    public void setActionsJson(@Nullable String setterArg) {
      this.actionsJson = setterArg;
    }

    public static class Builder {
      private @Nullable String itemId;
      public @NonNull Builder setItemId(@Nullable String setterArg) {
        this.itemId = setterArg;
        return this;
      }
      private @Nullable String parentId;
      public @NonNull Builder setParentId(@Nullable String setterArg) {
        this.parentId = setterArg;
        return this;
      }
      private @Nullable Long timestamp;
      public @NonNull Builder setTimestamp(@Nullable Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }
      private @Nullable Long type;
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Boolean isVisible;
      public @NonNull Builder setIsVisible(@Nullable Boolean setterArg) {
        this.isVisible = setterArg;
        return this;
      }
      private @Nullable Boolean isFloating;
      public @NonNull Builder setIsFloating(@Nullable Boolean setterArg) {
        this.isFloating = setterArg;
        return this;
      }
      private @Nullable Boolean isAllDay;
      public @NonNull Builder setIsAllDay(@Nullable Boolean setterArg) {
        this.isAllDay = setterArg;
        return this;
      }
      private @Nullable Boolean persistQuickView;
      public @NonNull Builder setPersistQuickView(@Nullable Boolean setterArg) {
        this.persistQuickView = setterArg;
        return this;
      }
      private @Nullable Long layout;
      public @NonNull Builder setLayout(@Nullable Long setterArg) {
        this.layout = setterArg;
        return this;
      }
      private @Nullable String attributesJson;
      public @NonNull Builder setAttributesJson(@Nullable String setterArg) {
        this.attributesJson = setterArg;
        return this;
      }
      private @Nullable String actionsJson;
      public @NonNull Builder setActionsJson(@Nullable String setterArg) {
        this.actionsJson = setterArg;
        return this;
      }
      public @NonNull TimelinePinPigeon build() {
        TimelinePinPigeon pigeonReturn = new TimelinePinPigeon();
        pigeonReturn.setItemId(itemId);
        pigeonReturn.setParentId(parentId);
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setType(type);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setIsVisible(isVisible);
        pigeonReturn.setIsFloating(isFloating);
        pigeonReturn.setIsAllDay(isAllDay);
        pigeonReturn.setPersistQuickView(persistQuickView);
        pigeonReturn.setLayout(layout);
        pigeonReturn.setAttributesJson(attributesJson);
        pigeonReturn.setActionsJson(actionsJson);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("parentId", parentId);
      toMapResult.put("timestamp", timestamp);
      toMapResult.put("type", type);
      toMapResult.put("duration", duration);
      toMapResult.put("isVisible", isVisible);
      toMapResult.put("isFloating", isFloating);
      toMapResult.put("isAllDay", isAllDay);
      toMapResult.put("persistQuickView", persistQuickView);
      toMapResult.put("layout", layout);
      toMapResult.put("attributesJson", attributesJson);
      toMapResult.put("actionsJson", actionsJson);
      return toMapResult;
    }
    static @NonNull TimelinePinPigeon fromMap(@NonNull Map<String, Object> map) {
      TimelinePinPigeon pigeonResult = new TimelinePinPigeon();
      Object itemId = map.get("itemId");
      pigeonResult.setItemId((String)itemId);
      Object parentId = map.get("parentId");
      pigeonResult.setParentId((String)parentId);
      Object timestamp = map.get("timestamp");
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp));
      Object type = map.get("type");
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type));
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object isVisible = map.get("isVisible");
      pigeonResult.setIsVisible((Boolean)isVisible);
      Object isFloating = map.get("isFloating");
      pigeonResult.setIsFloating((Boolean)isFloating);
      Object isAllDay = map.get("isAllDay");
      pigeonResult.setIsAllDay((Boolean)isAllDay);
      Object persistQuickView = map.get("persistQuickView");
      pigeonResult.setPersistQuickView((Boolean)persistQuickView);
      Object layout = map.get("layout");
      pigeonResult.setLayout((layout == null) ? null : ((layout instanceof Integer) ? (Integer)layout : (Long)layout));
      Object attributesJson = map.get("attributesJson");
      pigeonResult.setAttributesJson((String)attributesJson);
      Object actionsJson = map.get("actionsJson");
      pigeonResult.setActionsJson((String)actionsJson);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ActionTrigger {
    private @Nullable String itemId;
    public @Nullable String getItemId() { return itemId; }
    public void setItemId(@Nullable String setterArg) {
      this.itemId = setterArg;
    }

    private @Nullable Long actionId;
    public @Nullable Long getActionId() { return actionId; }
    public void setActionId(@Nullable Long setterArg) {
      this.actionId = setterArg;
    }

    private @Nullable String attributesJson;
    public @Nullable String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(@Nullable String setterArg) {
      this.attributesJson = setterArg;
    }

    public static class Builder {
      private @Nullable String itemId;
      public @NonNull Builder setItemId(@Nullable String setterArg) {
        this.itemId = setterArg;
        return this;
      }
      private @Nullable Long actionId;
      public @NonNull Builder setActionId(@Nullable Long setterArg) {
        this.actionId = setterArg;
        return this;
      }
      private @Nullable String attributesJson;
      public @NonNull Builder setAttributesJson(@Nullable String setterArg) {
        this.attributesJson = setterArg;
        return this;
      }
      public @NonNull ActionTrigger build() {
        ActionTrigger pigeonReturn = new ActionTrigger();
        pigeonReturn.setItemId(itemId);
        pigeonReturn.setActionId(actionId);
        pigeonReturn.setAttributesJson(attributesJson);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("actionId", actionId);
      toMapResult.put("attributesJson", attributesJson);
      return toMapResult;
    }
    static @NonNull ActionTrigger fromMap(@NonNull Map<String, Object> map) {
      ActionTrigger pigeonResult = new ActionTrigger();
      Object itemId = map.get("itemId");
      pigeonResult.setItemId((String)itemId);
      Object actionId = map.get("actionId");
      pigeonResult.setActionId((actionId == null) ? null : ((actionId instanceof Integer) ? (Integer)actionId : (Long)actionId));
      Object attributesJson = map.get("attributesJson");
      pigeonResult.setAttributesJson((String)attributesJson);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ActionResponsePigeon {
    private @Nullable Boolean success;
    public @Nullable Boolean getSuccess() { return success; }
    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    private @Nullable String attributesJson;
    public @Nullable String getAttributesJson() { return attributesJson; }
    public void setAttributesJson(@Nullable String setterArg) {
      this.attributesJson = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean success;
      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }
      private @Nullable String attributesJson;
      public @NonNull Builder setAttributesJson(@Nullable String setterArg) {
        this.attributesJson = setterArg;
        return this;
      }
      public @NonNull ActionResponsePigeon build() {
        ActionResponsePigeon pigeonReturn = new ActionResponsePigeon();
        pigeonReturn.setSuccess(success);
        pigeonReturn.setAttributesJson(attributesJson);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("attributesJson", attributesJson);
      return toMapResult;
    }
    static @NonNull ActionResponsePigeon fromMap(@NonNull Map<String, Object> map) {
      ActionResponsePigeon pigeonResult = new ActionResponsePigeon();
      Object success = map.get("success");
      pigeonResult.setSuccess((Boolean)success);
      Object attributesJson = map.get("attributesJson");
      pigeonResult.setAttributesJson((String)attributesJson);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotifActionExecuteReq {
    private @Nullable String itemId;
    public @Nullable String getItemId() { return itemId; }
    public void setItemId(@Nullable String setterArg) {
      this.itemId = setterArg;
    }

    private @Nullable Long actionId;
    public @Nullable Long getActionId() { return actionId; }
    public void setActionId(@Nullable Long setterArg) {
      this.actionId = setterArg;
    }

    private @Nullable String responseText;
    public @Nullable String getResponseText() { return responseText; }
    public void setResponseText(@Nullable String setterArg) {
      this.responseText = setterArg;
    }

    public static class Builder {
      private @Nullable String itemId;
      public @NonNull Builder setItemId(@Nullable String setterArg) {
        this.itemId = setterArg;
        return this;
      }
      private @Nullable Long actionId;
      public @NonNull Builder setActionId(@Nullable Long setterArg) {
        this.actionId = setterArg;
        return this;
      }
      private @Nullable String responseText;
      public @NonNull Builder setResponseText(@Nullable String setterArg) {
        this.responseText = setterArg;
        return this;
      }
      public @NonNull NotifActionExecuteReq build() {
        NotifActionExecuteReq pigeonReturn = new NotifActionExecuteReq();
        pigeonReturn.setItemId(itemId);
        pigeonReturn.setActionId(actionId);
        pigeonReturn.setResponseText(responseText);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("itemId", itemId);
      toMapResult.put("actionId", actionId);
      toMapResult.put("responseText", responseText);
      return toMapResult;
    }
    static @NonNull NotifActionExecuteReq fromMap(@NonNull Map<String, Object> map) {
      NotifActionExecuteReq pigeonResult = new NotifActionExecuteReq();
      Object itemId = map.get("itemId");
      pigeonResult.setItemId((String)itemId);
      Object actionId = map.get("actionId");
      pigeonResult.setActionId((actionId == null) ? null : ((actionId instanceof Integer) ? (Integer)actionId : (Long)actionId));
      Object responseText = map.get("responseText");
      pigeonResult.setResponseText((String)responseText);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotificationPigeon {
    private @Nullable String packageId;
    public @Nullable String getPackageId() { return packageId; }
    public void setPackageId(@Nullable String setterArg) {
      this.packageId = setterArg;
    }

    private @Nullable Long notifId;
    public @Nullable Long getNotifId() { return notifId; }
    public void setNotifId(@Nullable Long setterArg) {
      this.notifId = setterArg;
    }

    private @Nullable String appName;
    public @Nullable String getAppName() { return appName; }
    public void setAppName(@Nullable String setterArg) {
      this.appName = setterArg;
    }

    private @Nullable String tagId;
    public @Nullable String getTagId() { return tagId; }
    public void setTagId(@Nullable String setterArg) {
      this.tagId = setterArg;
    }

    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String text;
    public @Nullable String getText() { return text; }
    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    private @Nullable String category;
    public @Nullable String getCategory() { return category; }
    public void setCategory(@Nullable String setterArg) {
      this.category = setterArg;
    }

    private @Nullable Long color;
    public @Nullable Long getColor() { return color; }
    public void setColor(@Nullable Long setterArg) {
      this.color = setterArg;
    }

    private @Nullable String messagesJson;
    public @Nullable String getMessagesJson() { return messagesJson; }
    public void setMessagesJson(@Nullable String setterArg) {
      this.messagesJson = setterArg;
    }

    private @Nullable String actionsJson;
    public @Nullable String getActionsJson() { return actionsJson; }
    public void setActionsJson(@Nullable String setterArg) {
      this.actionsJson = setterArg;
    }

    public static class Builder {
      private @Nullable String packageId;
      public @NonNull Builder setPackageId(@Nullable String setterArg) {
        this.packageId = setterArg;
        return this;
      }
      private @Nullable Long notifId;
      public @NonNull Builder setNotifId(@Nullable Long setterArg) {
        this.notifId = setterArg;
        return this;
      }
      private @Nullable String appName;
      public @NonNull Builder setAppName(@Nullable String setterArg) {
        this.appName = setterArg;
        return this;
      }
      private @Nullable String tagId;
      public @NonNull Builder setTagId(@Nullable String setterArg) {
        this.tagId = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String text;
      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }
      private @Nullable String category;
      public @NonNull Builder setCategory(@Nullable String setterArg) {
        this.category = setterArg;
        return this;
      }
      private @Nullable Long color;
      public @NonNull Builder setColor(@Nullable Long setterArg) {
        this.color = setterArg;
        return this;
      }
      private @Nullable String messagesJson;
      public @NonNull Builder setMessagesJson(@Nullable String setterArg) {
        this.messagesJson = setterArg;
        return this;
      }
      private @Nullable String actionsJson;
      public @NonNull Builder setActionsJson(@Nullable String setterArg) {
        this.actionsJson = setterArg;
        return this;
      }
      public @NonNull NotificationPigeon build() {
        NotificationPigeon pigeonReturn = new NotificationPigeon();
        pigeonReturn.setPackageId(packageId);
        pigeonReturn.setNotifId(notifId);
        pigeonReturn.setAppName(appName);
        pigeonReturn.setTagId(tagId);
        pigeonReturn.setTitle(title);
        pigeonReturn.setText(text);
        pigeonReturn.setCategory(category);
        pigeonReturn.setColor(color);
        pigeonReturn.setMessagesJson(messagesJson);
        pigeonReturn.setActionsJson(actionsJson);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("packageId", packageId);
      toMapResult.put("notifId", notifId);
      toMapResult.put("appName", appName);
      toMapResult.put("tagId", tagId);
      toMapResult.put("title", title);
      toMapResult.put("text", text);
      toMapResult.put("category", category);
      toMapResult.put("color", color);
      toMapResult.put("messagesJson", messagesJson);
      toMapResult.put("actionsJson", actionsJson);
      return toMapResult;
    }
    static @NonNull NotificationPigeon fromMap(@NonNull Map<String, Object> map) {
      NotificationPigeon pigeonResult = new NotificationPigeon();
      Object packageId = map.get("packageId");
      pigeonResult.setPackageId((String)packageId);
      Object notifId = map.get("notifId");
      pigeonResult.setNotifId((notifId == null) ? null : ((notifId instanceof Integer) ? (Integer)notifId : (Long)notifId));
      Object appName = map.get("appName");
      pigeonResult.setAppName((String)appName);
      Object tagId = map.get("tagId");
      pigeonResult.setTagId((String)tagId);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object text = map.get("text");
      pigeonResult.setText((String)text);
      Object category = map.get("category");
      pigeonResult.setCategory((String)category);
      Object color = map.get("color");
      pigeonResult.setColor((color == null) ? null : ((color instanceof Integer) ? (Integer)color : (Long)color));
      Object messagesJson = map.get("messagesJson");
      pigeonResult.setMessagesJson((String)messagesJson);
      Object actionsJson = map.get("actionsJson");
      pigeonResult.setActionsJson((String)actionsJson);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppEntriesPigeon {
    private @Nullable List<String> appName;
    public @Nullable List<String> getAppName() { return appName; }
    public void setAppName(@Nullable List<String> setterArg) {
      this.appName = setterArg;
    }

    private @Nullable List<String> packageId;
    public @Nullable List<String> getPackageId() { return packageId; }
    public void setPackageId(@Nullable List<String> setterArg) {
      this.packageId = setterArg;
    }

    public static class Builder {
      private @Nullable List<String> appName;
      public @NonNull Builder setAppName(@Nullable List<String> setterArg) {
        this.appName = setterArg;
        return this;
      }
      private @Nullable List<String> packageId;
      public @NonNull Builder setPackageId(@Nullable List<String> setterArg) {
        this.packageId = setterArg;
        return this;
      }
      public @NonNull AppEntriesPigeon build() {
        AppEntriesPigeon pigeonReturn = new AppEntriesPigeon();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setPackageId(packageId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("appName", appName);
      toMapResult.put("packageId", packageId);
      return toMapResult;
    }
    static @NonNull AppEntriesPigeon fromMap(@NonNull Map<String, Object> map) {
      AppEntriesPigeon pigeonResult = new AppEntriesPigeon();
      Object appName = map.get("appName");
      pigeonResult.setAppName((List<String>)appName);
      Object packageId = map.get("packageId");
      pigeonResult.setPackageId((List<String>)packageId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PbwAppInfo {
    private @Nullable Boolean isValid;
    public @Nullable Boolean getIsValid() { return isValid; }
    public void setIsValid(@Nullable Boolean setterArg) {
      this.isValid = setterArg;
    }

    private @Nullable String uuid;
    public @Nullable String getUuid() { return uuid; }
    public void setUuid(@Nullable String setterArg) {
      this.uuid = setterArg;
    }

    private @Nullable String shortName;
    public @Nullable String getShortName() { return shortName; }
    public void setShortName(@Nullable String setterArg) {
      this.shortName = setterArg;
    }

    private @Nullable String longName;
    public @Nullable String getLongName() { return longName; }
    public void setLongName(@Nullable String setterArg) {
      this.longName = setterArg;
    }

    private @Nullable String companyName;
    public @Nullable String getCompanyName() { return companyName; }
    public void setCompanyName(@Nullable String setterArg) {
      this.companyName = setterArg;
    }

    private @Nullable Long versionCode;
    public @Nullable Long getVersionCode() { return versionCode; }
    public void setVersionCode(@Nullable Long setterArg) {
      this.versionCode = setterArg;
    }

    private @Nullable String versionLabel;
    public @Nullable String getVersionLabel() { return versionLabel; }
    public void setVersionLabel(@Nullable String setterArg) {
      this.versionLabel = setterArg;
    }

    private @Nullable Map<String, Long> appKeys;
    public @Nullable Map<String, Long> getAppKeys() { return appKeys; }
    public void setAppKeys(@Nullable Map<String, Long> setterArg) {
      this.appKeys = setterArg;
    }

    private @Nullable List<String> capabilities;
    public @Nullable List<String> getCapabilities() { return capabilities; }
    public void setCapabilities(@Nullable List<String> setterArg) {
      this.capabilities = setterArg;
    }

    private @Nullable List<WatchResource> resources;
    public @Nullable List<WatchResource> getResources() { return resources; }
    public void setResources(@Nullable List<WatchResource> setterArg) {
      this.resources = setterArg;
    }

    private @Nullable String sdkVersion;
    public @Nullable String getSdkVersion() { return sdkVersion; }
    public void setSdkVersion(@Nullable String setterArg) {
      this.sdkVersion = setterArg;
    }

    private @Nullable List<String> targetPlatforms;
    public @Nullable List<String> getTargetPlatforms() { return targetPlatforms; }
    public void setTargetPlatforms(@Nullable List<String> setterArg) {
      this.targetPlatforms = setterArg;
    }

    private @Nullable WatchappInfo watchapp;
    public @Nullable WatchappInfo getWatchapp() { return watchapp; }
    public void setWatchapp(@Nullable WatchappInfo setterArg) {
      this.watchapp = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean isValid;
      public @NonNull Builder setIsValid(@Nullable Boolean setterArg) {
        this.isValid = setterArg;
        return this;
      }
      private @Nullable String uuid;
      public @NonNull Builder setUuid(@Nullable String setterArg) {
        this.uuid = setterArg;
        return this;
      }
      private @Nullable String shortName;
      public @NonNull Builder setShortName(@Nullable String setterArg) {
        this.shortName = setterArg;
        return this;
      }
      private @Nullable String longName;
      public @NonNull Builder setLongName(@Nullable String setterArg) {
        this.longName = setterArg;
        return this;
      }
      private @Nullable String companyName;
      public @NonNull Builder setCompanyName(@Nullable String setterArg) {
        this.companyName = setterArg;
        return this;
      }
      private @Nullable Long versionCode;
      public @NonNull Builder setVersionCode(@Nullable Long setterArg) {
        this.versionCode = setterArg;
        return this;
      }
      private @Nullable String versionLabel;
      public @NonNull Builder setVersionLabel(@Nullable String setterArg) {
        this.versionLabel = setterArg;
        return this;
      }
      private @Nullable Map<String, Long> appKeys;
      public @NonNull Builder setAppKeys(@Nullable Map<String, Long> setterArg) {
        this.appKeys = setterArg;
        return this;
      }
      private @Nullable List<String> capabilities;
      public @NonNull Builder setCapabilities(@Nullable List<String> setterArg) {
        this.capabilities = setterArg;
        return this;
      }
      private @Nullable List<WatchResource> resources;
      public @NonNull Builder setResources(@Nullable List<WatchResource> setterArg) {
        this.resources = setterArg;
        return this;
      }
      private @Nullable String sdkVersion;
      public @NonNull Builder setSdkVersion(@Nullable String setterArg) {
        this.sdkVersion = setterArg;
        return this;
      }
      private @Nullable List<String> targetPlatforms;
      public @NonNull Builder setTargetPlatforms(@Nullable List<String> setterArg) {
        this.targetPlatforms = setterArg;
        return this;
      }
      private @Nullable WatchappInfo watchapp;
      public @NonNull Builder setWatchapp(@Nullable WatchappInfo setterArg) {
        this.watchapp = setterArg;
        return this;
      }
      public @NonNull PbwAppInfo build() {
        PbwAppInfo pigeonReturn = new PbwAppInfo();
        pigeonReturn.setIsValid(isValid);
        pigeonReturn.setUuid(uuid);
        pigeonReturn.setShortName(shortName);
        pigeonReturn.setLongName(longName);
        pigeonReturn.setCompanyName(companyName);
        pigeonReturn.setVersionCode(versionCode);
        pigeonReturn.setVersionLabel(versionLabel);
        pigeonReturn.setAppKeys(appKeys);
        pigeonReturn.setCapabilities(capabilities);
        pigeonReturn.setResources(resources);
        pigeonReturn.setSdkVersion(sdkVersion);
        pigeonReturn.setTargetPlatforms(targetPlatforms);
        pigeonReturn.setWatchapp(watchapp);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isValid", isValid);
      toMapResult.put("uuid", uuid);
      toMapResult.put("shortName", shortName);
      toMapResult.put("longName", longName);
      toMapResult.put("companyName", companyName);
      toMapResult.put("versionCode", versionCode);
      toMapResult.put("versionLabel", versionLabel);
      toMapResult.put("appKeys", appKeys);
      toMapResult.put("capabilities", capabilities);
      toMapResult.put("resources", resources);
      toMapResult.put("sdkVersion", sdkVersion);
      toMapResult.put("targetPlatforms", targetPlatforms);
      toMapResult.put("watchapp", (watchapp == null) ? null : watchapp.toMap());
      return toMapResult;
    }
    static @NonNull PbwAppInfo fromMap(@NonNull Map<String, Object> map) {
      PbwAppInfo pigeonResult = new PbwAppInfo();
      Object isValid = map.get("isValid");
      pigeonResult.setIsValid((Boolean)isValid);
      Object uuid = map.get("uuid");
      pigeonResult.setUuid((String)uuid);
      Object shortName = map.get("shortName");
      pigeonResult.setShortName((String)shortName);
      Object longName = map.get("longName");
      pigeonResult.setLongName((String)longName);
      Object companyName = map.get("companyName");
      pigeonResult.setCompanyName((String)companyName);
      Object versionCode = map.get("versionCode");
      pigeonResult.setVersionCode((versionCode == null) ? null : ((versionCode instanceof Integer) ? (Integer)versionCode : (Long)versionCode));
      Object versionLabel = map.get("versionLabel");
      pigeonResult.setVersionLabel((String)versionLabel);
      Object appKeys = map.get("appKeys");
      pigeonResult.setAppKeys((Map<String, Long>)appKeys);
      Object capabilities = map.get("capabilities");
      pigeonResult.setCapabilities((List<String>)capabilities);
      Object resources = map.get("resources");
      pigeonResult.setResources((List<WatchResource>)resources);
      Object sdkVersion = map.get("sdkVersion");
      pigeonResult.setSdkVersion((String)sdkVersion);
      Object targetPlatforms = map.get("targetPlatforms");
      pigeonResult.setTargetPlatforms((List<String>)targetPlatforms);
      Object watchapp = map.get("watchapp");
      pigeonResult.setWatchapp(WatchappInfo.fromMap((Map)watchapp));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchappInfo {
    private @Nullable Boolean watchface;
    public @Nullable Boolean getWatchface() { return watchface; }
    public void setWatchface(@Nullable Boolean setterArg) {
      this.watchface = setterArg;
    }

    private @Nullable Boolean hiddenApp;
    public @Nullable Boolean getHiddenApp() { return hiddenApp; }
    public void setHiddenApp(@Nullable Boolean setterArg) {
      this.hiddenApp = setterArg;
    }

    private @Nullable Boolean onlyShownOnCommunication;
    public @Nullable Boolean getOnlyShownOnCommunication() { return onlyShownOnCommunication; }
    public void setOnlyShownOnCommunication(@Nullable Boolean setterArg) {
      this.onlyShownOnCommunication = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean watchface;
      public @NonNull Builder setWatchface(@Nullable Boolean setterArg) {
        this.watchface = setterArg;
        return this;
      }
      private @Nullable Boolean hiddenApp;
      public @NonNull Builder setHiddenApp(@Nullable Boolean setterArg) {
        this.hiddenApp = setterArg;
        return this;
      }
      private @Nullable Boolean onlyShownOnCommunication;
      public @NonNull Builder setOnlyShownOnCommunication(@Nullable Boolean setterArg) {
        this.onlyShownOnCommunication = setterArg;
        return this;
      }
      public @NonNull WatchappInfo build() {
        WatchappInfo pigeonReturn = new WatchappInfo();
        pigeonReturn.setWatchface(watchface);
        pigeonReturn.setHiddenApp(hiddenApp);
        pigeonReturn.setOnlyShownOnCommunication(onlyShownOnCommunication);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("watchface", watchface);
      toMapResult.put("hiddenApp", hiddenApp);
      toMapResult.put("onlyShownOnCommunication", onlyShownOnCommunication);
      return toMapResult;
    }
    static @NonNull WatchappInfo fromMap(@NonNull Map<String, Object> map) {
      WatchappInfo pigeonResult = new WatchappInfo();
      Object watchface = map.get("watchface");
      pigeonResult.setWatchface((Boolean)watchface);
      Object hiddenApp = map.get("hiddenApp");
      pigeonResult.setHiddenApp((Boolean)hiddenApp);
      Object onlyShownOnCommunication = map.get("onlyShownOnCommunication");
      pigeonResult.setOnlyShownOnCommunication((Boolean)onlyShownOnCommunication);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WatchResource {
    private @Nullable String file;
    public @Nullable String getFile() { return file; }
    public void setFile(@Nullable String setterArg) {
      this.file = setterArg;
    }

    private @Nullable Boolean menuIcon;
    public @Nullable Boolean getMenuIcon() { return menuIcon; }
    public void setMenuIcon(@Nullable Boolean setterArg) {
      this.menuIcon = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    public static class Builder {
      private @Nullable String file;
      public @NonNull Builder setFile(@Nullable String setterArg) {
        this.file = setterArg;
        return this;
      }
      private @Nullable Boolean menuIcon;
      public @NonNull Builder setMenuIcon(@Nullable Boolean setterArg) {
        this.menuIcon = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull WatchResource build() {
        WatchResource pigeonReturn = new WatchResource();
        pigeonReturn.setFile(file);
        pigeonReturn.setMenuIcon(menuIcon);
        pigeonReturn.setName(name);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("file", file);
      toMapResult.put("menuIcon", menuIcon);
      toMapResult.put("name", name);
      toMapResult.put("type", type);
      return toMapResult;
    }
    static @NonNull WatchResource fromMap(@NonNull Map<String, Object> map) {
      WatchResource pigeonResult = new WatchResource();
      Object file = map.get("file");
      pigeonResult.setFile((String)file);
      Object menuIcon = map.get("menuIcon");
      pigeonResult.setMenuIcon((Boolean)menuIcon);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InstallData {
    private @NonNull String uri;
    public @NonNull String getUri() { return uri; }
    public void setUri(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uri\" is null.");
      }
      this.uri = setterArg;
    }

    private @NonNull PbwAppInfo appInfo;
    public @NonNull PbwAppInfo getAppInfo() { return appInfo; }
    public void setAppInfo(@NonNull PbwAppInfo setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appInfo\" is null.");
      }
      this.appInfo = setterArg;
    }

    private @NonNull Boolean stayOffloaded;
    public @NonNull Boolean getStayOffloaded() { return stayOffloaded; }
    public void setStayOffloaded(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"stayOffloaded\" is null.");
      }
      this.stayOffloaded = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InstallData() {}
    public static class Builder {
      private @Nullable String uri;
      public @NonNull Builder setUri(@NonNull String setterArg) {
        this.uri = setterArg;
        return this;
      }
      private @Nullable PbwAppInfo appInfo;
      public @NonNull Builder setAppInfo(@NonNull PbwAppInfo setterArg) {
        this.appInfo = setterArg;
        return this;
      }
      private @Nullable Boolean stayOffloaded;
      public @NonNull Builder setStayOffloaded(@NonNull Boolean setterArg) {
        this.stayOffloaded = setterArg;
        return this;
      }
      public @NonNull InstallData build() {
        InstallData pigeonReturn = new InstallData();
        pigeonReturn.setUri(uri);
        pigeonReturn.setAppInfo(appInfo);
        pigeonReturn.setStayOffloaded(stayOffloaded);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uri", uri);
      toMapResult.put("appInfo", (appInfo == null) ? null : appInfo.toMap());
      toMapResult.put("stayOffloaded", stayOffloaded);
      return toMapResult;
    }
    static @NonNull InstallData fromMap(@NonNull Map<String, Object> map) {
      InstallData pigeonResult = new InstallData();
      Object uri = map.get("uri");
      pigeonResult.setUri((String)uri);
      Object appInfo = map.get("appInfo");
      pigeonResult.setAppInfo(PbwAppInfo.fromMap((Map)appInfo));
      Object stayOffloaded = map.get("stayOffloaded");
      pigeonResult.setStayOffloaded((Boolean)stayOffloaded);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppInstallStatus {
    private @NonNull Double progress;
    public @NonNull Double getProgress() { return progress; }
    public void setProgress(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"progress\" is null.");
      }
      this.progress = setterArg;
    }

    private @NonNull Boolean isInstalling;
    public @NonNull Boolean getIsInstalling() { return isInstalling; }
    public void setIsInstalling(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isInstalling\" is null.");
      }
      this.isInstalling = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppInstallStatus() {}
    public static class Builder {
      private @Nullable Double progress;
      public @NonNull Builder setProgress(@NonNull Double setterArg) {
        this.progress = setterArg;
        return this;
      }
      private @Nullable Boolean isInstalling;
      public @NonNull Builder setIsInstalling(@NonNull Boolean setterArg) {
        this.isInstalling = setterArg;
        return this;
      }
      public @NonNull AppInstallStatus build() {
        AppInstallStatus pigeonReturn = new AppInstallStatus();
        pigeonReturn.setProgress(progress);
        pigeonReturn.setIsInstalling(isInstalling);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("progress", progress);
      toMapResult.put("isInstalling", isInstalling);
      return toMapResult;
    }
    static @NonNull AppInstallStatus fromMap(@NonNull Map<String, Object> map) {
      AppInstallStatus pigeonResult = new AppInstallStatus();
      Object progress = map.get("progress");
      pigeonResult.setProgress((Double)progress);
      Object isInstalling = map.get("isInstalling");
      pigeonResult.setIsInstalling((Boolean)isInstalling);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenshotResult {
    private @NonNull Boolean success;
    public @NonNull Boolean getSuccess() { return success; }
    public void setSuccess(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"success\" is null.");
      }
      this.success = setterArg;
    }

    private @Nullable String imagePath;
    public @Nullable String getImagePath() { return imagePath; }
    public void setImagePath(@Nullable String setterArg) {
      this.imagePath = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ScreenshotResult() {}
    public static class Builder {
      private @Nullable Boolean success;
      public @NonNull Builder setSuccess(@NonNull Boolean setterArg) {
        this.success = setterArg;
        return this;
      }
      private @Nullable String imagePath;
      public @NonNull Builder setImagePath(@Nullable String setterArg) {
        this.imagePath = setterArg;
        return this;
      }
      public @NonNull ScreenshotResult build() {
        ScreenshotResult pigeonReturn = new ScreenshotResult();
        pigeonReturn.setSuccess(success);
        pigeonReturn.setImagePath(imagePath);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("success", success);
      toMapResult.put("imagePath", imagePath);
      return toMapResult;
    }
    static @NonNull ScreenshotResult fromMap(@NonNull Map<String, Object> map) {
      ScreenshotResult pigeonResult = new ScreenshotResult();
      Object success = map.get("success");
      pigeonResult.setSuccess((Boolean)success);
      Object imagePath = map.get("imagePath");
      pigeonResult.setImagePath((String)imagePath);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppLogEntry {
    private @NonNull String uuid;
    public @NonNull String getUuid() { return uuid; }
    public void setUuid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uuid\" is null.");
      }
      this.uuid = setterArg;
    }

    private @NonNull Long timestamp;
    public @NonNull Long getTimestamp() { return timestamp; }
    public void setTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timestamp\" is null.");
      }
      this.timestamp = setterArg;
    }

    private @NonNull Long level;
    public @NonNull Long getLevel() { return level; }
    public void setLevel(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"level\" is null.");
      }
      this.level = setterArg;
    }

    private @NonNull Long lineNumber;
    public @NonNull Long getLineNumber() { return lineNumber; }
    public void setLineNumber(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lineNumber\" is null.");
      }
      this.lineNumber = setterArg;
    }

    private @NonNull String filename;
    public @NonNull String getFilename() { return filename; }
    public void setFilename(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filename\" is null.");
      }
      this.filename = setterArg;
    }

    private @NonNull String message;
    public @NonNull String getMessage() { return message; }
    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppLogEntry() {}
    public static class Builder {
      private @Nullable String uuid;
      public @NonNull Builder setUuid(@NonNull String setterArg) {
        this.uuid = setterArg;
        return this;
      }
      private @Nullable Long timestamp;
      public @NonNull Builder setTimestamp(@NonNull Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }
      private @Nullable Long level;
      public @NonNull Builder setLevel(@NonNull Long setterArg) {
        this.level = setterArg;
        return this;
      }
      private @Nullable Long lineNumber;
      public @NonNull Builder setLineNumber(@NonNull Long setterArg) {
        this.lineNumber = setterArg;
        return this;
      }
      private @Nullable String filename;
      public @NonNull Builder setFilename(@NonNull String setterArg) {
        this.filename = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull AppLogEntry build() {
        AppLogEntry pigeonReturn = new AppLogEntry();
        pigeonReturn.setUuid(uuid);
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setLevel(level);
        pigeonReturn.setLineNumber(lineNumber);
        pigeonReturn.setFilename(filename);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uuid", uuid);
      toMapResult.put("timestamp", timestamp);
      toMapResult.put("level", level);
      toMapResult.put("lineNumber", lineNumber);
      toMapResult.put("filename", filename);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static @NonNull AppLogEntry fromMap(@NonNull Map<String, Object> map) {
      AppLogEntry pigeonResult = new AppLogEntry();
      Object uuid = map.get("uuid");
      pigeonResult.setUuid((String)uuid);
      Object timestamp = map.get("timestamp");
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp));
      Object level = map.get("level");
      pigeonResult.setLevel((level == null) ? null : ((level instanceof Integer) ? (Integer)level : (Long)level));
      Object lineNumber = map.get("lineNumber");
      pigeonResult.setLineNumber((lineNumber == null) ? null : ((lineNumber instanceof Integer) ? (Integer)lineNumber : (Long)lineNumber));
      Object filename = map.get("filename");
      pigeonResult.setFilename((String)filename);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NotifChannelPigeon {
    private @Nullable String packageId;
    public @Nullable String getPackageId() { return packageId; }
    public void setPackageId(@Nullable String setterArg) {
      this.packageId = setterArg;
    }

    private @Nullable String channelId;
    public @Nullable String getChannelId() { return channelId; }
    public void setChannelId(@Nullable String setterArg) {
      this.channelId = setterArg;
    }

    private @Nullable String channelName;
    public @Nullable String getChannelName() { return channelName; }
    public void setChannelName(@Nullable String setterArg) {
      this.channelName = setterArg;
    }

    private @Nullable String channelDesc;
    public @Nullable String getChannelDesc() { return channelDesc; }
    public void setChannelDesc(@Nullable String setterArg) {
      this.channelDesc = setterArg;
    }

    private @Nullable Boolean delete;
    public @Nullable Boolean getDelete() { return delete; }
    public void setDelete(@Nullable Boolean setterArg) {
      this.delete = setterArg;
    }

    public static class Builder {
      private @Nullable String packageId;
      public @NonNull Builder setPackageId(@Nullable String setterArg) {
        this.packageId = setterArg;
        return this;
      }
      private @Nullable String channelId;
      public @NonNull Builder setChannelId(@Nullable String setterArg) {
        this.channelId = setterArg;
        return this;
      }
      private @Nullable String channelName;
      public @NonNull Builder setChannelName(@Nullable String setterArg) {
        this.channelName = setterArg;
        return this;
      }
      private @Nullable String channelDesc;
      public @NonNull Builder setChannelDesc(@Nullable String setterArg) {
        this.channelDesc = setterArg;
        return this;
      }
      private @Nullable Boolean delete;
      public @NonNull Builder setDelete(@Nullable Boolean setterArg) {
        this.delete = setterArg;
        return this;
      }
      public @NonNull NotifChannelPigeon build() {
        NotifChannelPigeon pigeonReturn = new NotifChannelPigeon();
        pigeonReturn.setPackageId(packageId);
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setChannelName(channelName);
        pigeonReturn.setChannelDesc(channelDesc);
        pigeonReturn.setDelete(delete);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("packageId", packageId);
      toMapResult.put("channelId", channelId);
      toMapResult.put("channelName", channelName);
      toMapResult.put("channelDesc", channelDesc);
      toMapResult.put("delete", delete);
      return toMapResult;
    }
    static @NonNull NotifChannelPigeon fromMap(@NonNull Map<String, Object> map) {
      NotifChannelPigeon pigeonResult = new NotifChannelPigeon();
      Object packageId = map.get("packageId");
      pigeonResult.setPackageId((String)packageId);
      Object channelId = map.get("channelId");
      pigeonResult.setChannelId((String)channelId);
      Object channelName = map.get("channelName");
      pigeonResult.setChannelName((String)channelName);
      Object channelDesc = map.get("channelDesc");
      pigeonResult.setChannelDesc((String)channelDesc);
      Object delete = map.get("delete");
      pigeonResult.setDelete((Boolean)delete);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OAuthResult {
    private @Nullable String code;
    public @Nullable String getCode() { return code; }
    public void setCode(@Nullable String setterArg) {
      this.code = setterArg;
    }

    private @Nullable String state;
    public @Nullable String getState() { return state; }
    public void setState(@Nullable String setterArg) {
      this.state = setterArg;
    }

    private @Nullable String error;
    public @Nullable String getError() { return error; }
    public void setError(@Nullable String setterArg) {
      this.error = setterArg;
    }

    public static class Builder {
      private @Nullable String code;
      public @NonNull Builder setCode(@Nullable String setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String state;
      public @NonNull Builder setState(@Nullable String setterArg) {
        this.state = setterArg;
        return this;
      }
      private @Nullable String error;
      public @NonNull Builder setError(@Nullable String setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull OAuthResult build() {
        OAuthResult pigeonReturn = new OAuthResult();
        pigeonReturn.setCode(code);
        pigeonReturn.setState(state);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("state", state);
      toMapResult.put("error", error);
      return toMapResult;
    }
    static @NonNull OAuthResult fromMap(@NonNull Map<String, Object> map) {
      OAuthResult pigeonResult = new OAuthResult();
      Object code = map.get("code");
      pigeonResult.setCode((String)code);
      Object state = map.get("state");
      pigeonResult.setState((String)state);
      Object error = map.get("error");
      pigeonResult.setError((String)error);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ScanCallbacksCodec extends StandardMessageCodec {
    public static final ScanCallbacksCodec INSTANCE = new ScanCallbacksCodec();
    private ScanCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ListWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ListWrapper) {
        stream.write(128);
        writeValue(stream, ((ListWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ScanCallbacks {
    private final BinaryMessenger binaryMessenger;
    public ScanCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ScanCallbacksCodec.INSTANCE;
    }

    public void onScanUpdate(ListWrapper pebblesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanUpdate", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(pebblesArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onScanStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanStarted", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onScanStopped(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanCallbacks.onScanStopped", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class ConnectionCallbacksCodec extends StandardMessageCodec {
    public static final ConnectionCallbacksCodec INSTANCE = new ConnectionCallbacksCodec();
    private ConnectionCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PebbleDevicePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PebbleFirmwarePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return WatchConnectionStatePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PebbleDevicePigeon) {
        stream.write(128);
        writeValue(stream, ((PebbleDevicePigeon) value).toMap());
      } else 
      if (value instanceof PebbleFirmwarePigeon) {
        stream.write(129);
        writeValue(stream, ((PebbleFirmwarePigeon) value).toMap());
      } else 
      if (value instanceof WatchConnectionStatePigeon) {
        stream.write(130);
        writeValue(stream, ((WatchConnectionStatePigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ConnectionCallbacks {
    private final BinaryMessenger binaryMessenger;
    public ConnectionCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ConnectionCallbacksCodec.INSTANCE;
    }

    public void onWatchConnectionStateChanged(WatchConnectionStatePigeon newStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionCallbacks.onWatchConnectionStateChanged", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(newStateArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class RawIncomingPacketsCallbacksCodec extends StandardMessageCodec {
    public static final RawIncomingPacketsCallbacksCodec INSTANCE = new RawIncomingPacketsCallbacksCodec();
    private RawIncomingPacketsCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ListWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ListWrapper) {
        stream.write(128);
        writeValue(stream, ((ListWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class RawIncomingPacketsCallbacks {
    private final BinaryMessenger binaryMessenger;
    public RawIncomingPacketsCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return RawIncomingPacketsCallbacksCodec.INSTANCE;
    }

    public void onPacketReceived(ListWrapper listOfBytesArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RawIncomingPacketsCallbacks.onPacketReceived", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(listOfBytesArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class PairCallbacksCodec extends StandardMessageCodec {
    public static final PairCallbacksCodec INSTANCE = new PairCallbacksCodec();
    private PairCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StringWrapper) {
        stream.write(128);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PairCallbacks {
    private final BinaryMessenger binaryMessenger;
    public PairCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PairCallbacksCodec.INSTANCE;
    }

    public void onWatchPairComplete(StringWrapper addressArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PairCallbacks.onWatchPairComplete", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(addressArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class CalendarCallbacksCodec extends StandardMessageCodec {
    public static final CalendarCallbacksCodec INSTANCE = new CalendarCallbacksCodec();
    private CalendarCallbacksCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class CalendarCallbacks {
    private final BinaryMessenger binaryMessenger;
    public CalendarCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return CalendarCallbacksCodec.INSTANCE;
    }

    public void doFullCalendarSync(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarCallbacks.doFullCalendarSync", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class TimelineCallbacksCodec extends StandardMessageCodec {
    public static final TimelineCallbacksCodec INSTANCE = new TimelineCallbacksCodec();
    private TimelineCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ActionResponsePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ActionTrigger.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ActionResponsePigeon) {
        stream.write(128);
        writeValue(stream, ((ActionResponsePigeon) value).toMap());
      } else 
      if (value instanceof ActionTrigger) {
        stream.write(129);
        writeValue(stream, ((ActionTrigger) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class TimelineCallbacks {
    private final BinaryMessenger binaryMessenger;
    public TimelineCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return TimelineCallbacksCodec.INSTANCE;
    }

    public void syncTimelineToWatch(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineCallbacks.syncTimelineToWatch", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void handleTimelineAction(ActionTrigger actionTriggerArg, Reply<ActionResponsePigeon> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineCallbacks.handleTimelineAction", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(actionTriggerArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        ActionResponsePigeon output = (ActionResponsePigeon)channelReply;
        callback.reply(output);
      });
    }
  }
  private static class IntentCallbacksCodec extends StandardMessageCodec {
    public static final IntentCallbacksCodec INSTANCE = new IntentCallbacksCodec();
    private IntentCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StringWrapper) {
        stream.write(128);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class IntentCallbacks {
    private final BinaryMessenger binaryMessenger;
    public IntentCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return IntentCallbacksCodec.INSTANCE;
    }

    public void openUri(StringWrapper uriArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentCallbacks.openUri", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uriArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class BackgroundAppInstallCallbacksCodec extends StandardMessageCodec {
    public static final BackgroundAppInstallCallbacksCodec INSTANCE = new BackgroundAppInstallCallbacksCodec();
    private BackgroundAppInstallCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return InstallData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PbwAppInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return WatchResource.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return WatchappInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof InstallData) {
        stream.write(128);
        writeValue(stream, ((InstallData) value).toMap());
      } else 
      if (value instanceof PbwAppInfo) {
        stream.write(129);
        writeValue(stream, ((PbwAppInfo) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(130);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
      if (value instanceof WatchResource) {
        stream.write(131);
        writeValue(stream, ((WatchResource) value).toMap());
      } else 
      if (value instanceof WatchappInfo) {
        stream.write(132);
        writeValue(stream, ((WatchappInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class BackgroundAppInstallCallbacks {
    private final BinaryMessenger binaryMessenger;
    public BackgroundAppInstallCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return BackgroundAppInstallCallbacksCodec.INSTANCE;
    }

    public void beginAppInstall(InstallData installDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundAppInstallCallbacks.beginAppInstall", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(installDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void deleteApp(StringWrapper uuidArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundAppInstallCallbacks.deleteApp", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class AppInstallStatusCallbacksCodec extends StandardMessageCodec {
    public static final AppInstallStatusCallbacksCodec INSTANCE = new AppInstallStatusCallbacksCodec();
    private AppInstallStatusCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppInstallStatus.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppInstallStatus) {
        stream.write(128);
        writeValue(stream, ((AppInstallStatus) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AppInstallStatusCallbacks {
    private final BinaryMessenger binaryMessenger;
    public AppInstallStatusCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return AppInstallStatusCallbacksCodec.INSTANCE;
    }

    public void onStatusUpdated(AppInstallStatus statusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallStatusCallbacks.onStatusUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(statusArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class NotificationListeningCodec extends StandardMessageCodec {
    public static final NotificationListeningCodec INSTANCE = new NotificationListeningCodec();
    private NotificationListeningCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NotifChannelPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return NotificationPigeon.fromMap((Map<String, Object>) readValue(buffer));

        case (byte)131:
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));

        case (byte)132:
          return TimelinePinPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else
      if (value instanceof NotifChannelPigeon) {
        stream.write(129);
        writeValue(stream, ((NotifChannelPigeon) value).toMap());
      } else
      if (value instanceof NotificationPigeon) {
        stream.write(130);
        writeValue(stream, ((NotificationPigeon) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(131);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
      if (value instanceof TimelinePinPigeon) {
        stream.write(132);
        writeValue(stream, ((TimelinePinPigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class NotificationListening {
    private final BinaryMessenger binaryMessenger;
    public NotificationListening(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return NotificationListeningCodec.INSTANCE;
    }

    public void handleNotification(NotificationPigeon notificationArg, Reply<TimelinePinPigeon> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.handleNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(notificationArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        TimelinePinPigeon output = (TimelinePinPigeon)channelReply;
        callback.reply(output);
      });
    }
    public void dismissNotification(StringWrapper itemIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.dismissNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(itemIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void shouldNotify(NotifChannelPigeon channelArg, Reply<BooleanWrapper> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.shouldNotify", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(channelArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        BooleanWrapper output = (BooleanWrapper)channelReply;
        callback.reply(output);
      });
    }
    public void updateChannel(NotifChannelPigeon channelArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationListening.updateChannel", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(channelArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class AppLogCallbacksCodec extends StandardMessageCodec {
    public static final AppLogCallbacksCodec INSTANCE = new AppLogCallbacksCodec();
    private AppLogCallbacksCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppLogEntry.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppLogEntry) {
        stream.write(128);
        writeValue(stream, ((AppLogEntry) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AppLogCallbacks {
    private final BinaryMessenger binaryMessenger;
    public AppLogCallbacks(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return AppLogCallbacksCodec.INSTANCE;
    }

    public void onLogReceived(AppLogEntry entryArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppLogCallbacks.onLogReceived", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(entryArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class NotificationUtilsCodec extends StandardMessageCodec {
    public static final NotificationUtilsCodec INSTANCE = new NotificationUtilsCodec();
    private NotificationUtilsCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NotifActionExecuteReq.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else 
      if (value instanceof NotifActionExecuteReq) {
        stream.write(129);
        writeValue(stream, ((NotifActionExecuteReq) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(130);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NotificationUtils {
    void dismissNotification(StringWrapper itemId, Result<BooleanWrapper> result);
    @NonNull void dismissNotificationWatch(StringWrapper itemId);
    @NonNull void openNotification(StringWrapper itemId);
    @NonNull void executeAction(NotifActionExecuteReq action);

    /** The codec used by NotificationUtils. */
    static MessageCodec<Object> getCodec() {
      return NotificationUtilsCodec.INSTANCE;
    }

    /** Sets up an instance of `NotificationUtils` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NotificationUtils api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.dismissNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper itemIdArg = (StringWrapper)args.get(0);
              if (itemIdArg == null) {
                throw new NullPointerException("itemIdArg unexpectedly null.");
              }
              Result<BooleanWrapper> resultCallback = new Result<BooleanWrapper>() {
                public void success(BooleanWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.dismissNotification(itemIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.dismissNotificationWatch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper itemIdArg = (StringWrapper)args.get(0);
              if (itemIdArg == null) {
                throw new NullPointerException("itemIdArg unexpectedly null.");
              }
              api.dismissNotificationWatch(itemIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.openNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper itemIdArg = (StringWrapper)args.get(0);
              if (itemIdArg == null) {
                throw new NullPointerException("itemIdArg unexpectedly null.");
              }
              api.openNotification(itemIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationUtils.executeAction", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NotifActionExecuteReq actionArg = (NotifActionExecuteReq)args.get(0);
              if (actionArg == null) {
                throw new NullPointerException("actionArg unexpectedly null.");
              }
              api.executeAction(actionArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ScanControlCodec extends StandardMessageCodec {
    public static final ScanControlCodec INSTANCE = new ScanControlCodec();
    private ScanControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ScanControl {
    @NonNull void startBleScan();
    @NonNull void startClassicScan();

    /** The codec used by ScanControl. */
    static MessageCodec<Object> getCodec() {
      return ScanControlCodec.INSTANCE;
    }

    /** Sets up an instance of `ScanControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ScanControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanControl.startBleScan", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.startBleScan();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScanControl.startClassicScan", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.startClassicScan();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ConnectionControlCodec extends StandardMessageCodec {
    public static final ConnectionControlCodec INSTANCE = new ConnectionControlCodec();
    private ConnectionControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ListWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else 
      if (value instanceof ListWrapper) {
        stream.write(129);
        writeValue(stream, ((ListWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConnectionControl {
    @NonNull BooleanWrapper isConnected();
    @NonNull void disconnect();
    @NonNull void sendRawPacket(ListWrapper listOfBytes);
    @NonNull void observeConnectionChanges();
    @NonNull void cancelObservingConnectionChanges();

    /** The codec used by ConnectionControl. */
    static MessageCodec<Object> getCodec() {
      return ConnectionControlCodec.INSTANCE;
    }

    /** Sets up an instance of `ConnectionControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConnectionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.isConnected", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.isConnected();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.disconnect();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.sendRawPacket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ListWrapper listOfBytesArg = (ListWrapper)args.get(0);
              if (listOfBytesArg == null) {
                throw new NullPointerException("listOfBytesArg unexpectedly null.");
              }
              api.sendRawPacket(listOfBytesArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.observeConnectionChanges", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.observeConnectionChanges();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConnectionControl.cancelObservingConnectionChanges", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancelObservingConnectionChanges();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class RawIncomingPacketsControlCodec extends StandardMessageCodec {
    public static final RawIncomingPacketsControlCodec INSTANCE = new RawIncomingPacketsControlCodec();
    private RawIncomingPacketsControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface RawIncomingPacketsControl {
    @NonNull void observeIncomingPackets();
    @NonNull void cancelObservingIncomingPackets();

    /** The codec used by RawIncomingPacketsControl. */
    static MessageCodec<Object> getCodec() {
      return RawIncomingPacketsControlCodec.INSTANCE;
    }

    /** Sets up an instance of `RawIncomingPacketsControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, RawIncomingPacketsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RawIncomingPacketsControl.observeIncomingPackets", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.observeIncomingPackets();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.RawIncomingPacketsControl.cancelObservingIncomingPackets", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancelObservingIncomingPackets();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class UiConnectionControlCodec extends StandardMessageCodec {
    public static final UiConnectionControlCodec INSTANCE = new UiConnectionControlCodec();
    private UiConnectionControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StringWrapper) {
        stream.write(128);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UiConnectionControl {
    @NonNull void connectToWatch(StringWrapper macAddress);
    @NonNull void unpairWatch(StringWrapper macAddress);

    /** The codec used by UiConnectionControl. */
    static MessageCodec<Object> getCodec() {
      return UiConnectionControlCodec.INSTANCE;
    }

    /** Sets up an instance of `UiConnectionControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UiConnectionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UiConnectionControl.connectToWatch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper macAddressArg = (StringWrapper)args.get(0);
              if (macAddressArg == null) {
                throw new NullPointerException("macAddressArg unexpectedly null.");
              }
              api.connectToWatch(macAddressArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UiConnectionControl.unpairWatch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper macAddressArg = (StringWrapper)args.get(0);
              if (macAddressArg == null) {
                throw new NullPointerException("macAddressArg unexpectedly null.");
              }
              api.unpairWatch(macAddressArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class NotificationsControlCodec extends StandardMessageCodec {
    public static final NotificationsControlCodec INSTANCE = new NotificationsControlCodec();
    private NotificationsControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NotificationsControl {
    @NonNull void sendTestNotification();

    /** The codec used by NotificationsControl. */
    static MessageCodec<Object> getCodec() {
      return NotificationsControlCodec.INSTANCE;
    }

    /** Sets up an instance of `NotificationsControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NotificationsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NotificationsControl.sendTestNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.sendTestNotification();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class IntentControlCodec extends StandardMessageCodec {
    public static final IntentControlCodec INSTANCE = new IntentControlCodec();
    private IntentControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return OAuthResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof OAuthResult) {
        stream.write(128);
        writeValue(stream, ((OAuthResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface IntentControl {
    @NonNull void notifyFlutterReadyForIntents();
    @NonNull void notifyFlutterNotReadyForIntents();
    void waitForOAuth(Result<OAuthResult> result);

    /** The codec used by IntentControl. */
    static MessageCodec<Object> getCodec() {
      return IntentControlCodec.INSTANCE;
    }

    /** Sets up an instance of `IntentControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, IntentControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.notifyFlutterReadyForIntents", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.notifyFlutterReadyForIntents();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.notifyFlutterNotReadyForIntents", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.notifyFlutterNotReadyForIntents();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IntentControl.waitForOAuth", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<OAuthResult> resultCallback = new Result<OAuthResult>() {
                public void success(OAuthResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.waitForOAuth(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DebugControlCodec extends StandardMessageCodec {
    public static final DebugControlCodec INSTANCE = new DebugControlCodec();
    private DebugControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DebugControl {
    @NonNull void collectLogs();

    /** The codec used by DebugControl. */
    static MessageCodec<Object> getCodec() {
      return DebugControlCodec.INSTANCE;
    }

    /** Sets up an instance of `DebugControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DebugControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DebugControl.collectLogs", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.collectLogs();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class TimelineControlCodec extends StandardMessageCodec {
    public static final TimelineControlCodec INSTANCE = new TimelineControlCodec();
    private TimelineControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NumberWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return TimelinePinPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NumberWrapper) {
        stream.write(128);
        writeValue(stream, ((NumberWrapper) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(129);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
      if (value instanceof TimelinePinPigeon) {
        stream.write(130);
        writeValue(stream, ((TimelinePinPigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TimelineControl {
    void addPin(TimelinePinPigeon pin, Result<NumberWrapper> result);
    void removePin(StringWrapper pinUuid, Result<NumberWrapper> result);
    void removeAllPins(Result<NumberWrapper> result);

    /** The codec used by TimelineControl. */
    static MessageCodec<Object> getCodec() {
      return TimelineControlCodec.INSTANCE;
    }

    /** Sets up an instance of `TimelineControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TimelineControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.addPin", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TimelinePinPigeon pinArg = (TimelinePinPigeon)args.get(0);
              if (pinArg == null) {
                throw new NullPointerException("pinArg unexpectedly null.");
              }
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addPin(pinArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.removePin", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper pinUuidArg = (StringWrapper)args.get(0);
              if (pinUuidArg == null) {
                throw new NullPointerException("pinUuidArg unexpectedly null.");
              }
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removePin(pinUuidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineControl.removeAllPins", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeAllPins(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class BackgroundSetupControlCodec extends StandardMessageCodec {
    public static final BackgroundSetupControlCodec INSTANCE = new BackgroundSetupControlCodec();
    private BackgroundSetupControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NumberWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NumberWrapper) {
        stream.write(128);
        writeValue(stream, ((NumberWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BackgroundSetupControl {
    @NonNull void setupBackground(NumberWrapper callbackHandle);

    /** The codec used by BackgroundSetupControl. */
    static MessageCodec<Object> getCodec() {
      return BackgroundSetupControlCodec.INSTANCE;
    }

    /** Sets up an instance of `BackgroundSetupControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BackgroundSetupControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundSetupControl.setupBackground", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NumberWrapper callbackHandleArg = (NumberWrapper)args.get(0);
              if (callbackHandleArg == null) {
                throw new NullPointerException("callbackHandleArg unexpectedly null.");
              }
              api.setupBackground(callbackHandleArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class BackgroundControlCodec extends StandardMessageCodec {
    public static final BackgroundControlCodec INSTANCE = new BackgroundControlCodec();
    private BackgroundControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NumberWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NumberWrapper) {
        stream.write(128);
        writeValue(stream, ((NumberWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BackgroundControl {
    void notifyFlutterBackgroundStarted(Result<NumberWrapper> result);

    /** The codec used by BackgroundControl. */
    static MessageCodec<Object> getCodec() {
      return BackgroundControlCodec.INSTANCE;
    }

    /** Sets up an instance of `BackgroundControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BackgroundControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BackgroundControl.notifyFlutterBackgroundStarted", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.notifyFlutterBackgroundStarted(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PermissionCheckCodec extends StandardMessageCodec {
    public static final PermissionCheckCodec INSTANCE = new PermissionCheckCodec();
    private PermissionCheckCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PermissionCheck {
    @NonNull BooleanWrapper hasLocationPermission();
    @NonNull BooleanWrapper hasCalendarPermission();
    @NonNull BooleanWrapper hasNotificationAccess();
    @NonNull BooleanWrapper hasBatteryExclusionEnabled();

    /** The codec used by PermissionCheck. */
    static MessageCodec<Object> getCodec() {
      return PermissionCheckCodec.INSTANCE;
    }

    /** Sets up an instance of `PermissionCheck` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PermissionCheck api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasLocationPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasLocationPermission();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasCalendarPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasCalendarPermission();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasNotificationAccess", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasNotificationAccess();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionCheck.hasBatteryExclusionEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BooleanWrapper output = api.hasBatteryExclusionEnabled();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PermissionControlCodec extends StandardMessageCodec {
    public static final PermissionControlCodec INSTANCE = new PermissionControlCodec();
    private PermissionControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NumberWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NumberWrapper) {
        stream.write(128);
        writeValue(stream, ((NumberWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PermissionControl {
    void requestLocationPermission(Result<NumberWrapper> result);
    void requestCalendarPermission(Result<NumberWrapper> result);
    void requestNotificationAccess(Result<Void> result);
    void requestBatteryExclusion(Result<Void> result);
    void requestBluetoothPermissions(Result<NumberWrapper> result);
    void openPermissionSettings(Result<Void> result);

    /** The codec used by PermissionControl. */
    static MessageCodec<Object> getCodec() {
      return PermissionControlCodec.INSTANCE;
    }

    /** Sets up an instance of `PermissionControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PermissionControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestLocationPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestLocationPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestCalendarPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestCalendarPermission(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestNotificationAccess", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestNotificationAccess(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestBatteryExclusion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestBatteryExclusion(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.requestBluetoothPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestBluetoothPermissions(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionControl.openPermissionSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.openPermissionSettings(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CalendarControlCodec extends StandardMessageCodec {
    public static final CalendarControlCodec INSTANCE = new CalendarControlCodec();
    private CalendarControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CalendarControl {
    @NonNull void requestCalendarSync();

    /** The codec used by CalendarControl. */
    static MessageCodec<Object> getCodec() {
      return CalendarControlCodec.INSTANCE;
    }

    /** Sets up an instance of `CalendarControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CalendarControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CalendarControl.requestCalendarSync", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.requestCalendarSync();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PigeonLoggerCodec extends StandardMessageCodec {
    public static final PigeonLoggerCodec INSTANCE = new PigeonLoggerCodec();
    private PigeonLoggerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StringWrapper) {
        stream.write(128);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PigeonLogger {
    @NonNull void v(StringWrapper message);
    @NonNull void d(StringWrapper message);
    @NonNull void i(StringWrapper message);
    @NonNull void w(StringWrapper message);
    @NonNull void e(StringWrapper message);

    /** The codec used by PigeonLogger. */
    static MessageCodec<Object> getCodec() {
      return PigeonLoggerCodec.INSTANCE;
    }

    /** Sets up an instance of `PigeonLogger` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PigeonLogger api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.v", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper messageArg = (StringWrapper)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.v(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.d", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper messageArg = (StringWrapper)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.d(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.i", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper messageArg = (StringWrapper)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.i(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.w", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper messageArg = (StringWrapper)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.w(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonLogger.e", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper messageArg = (StringWrapper)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.e(messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class TimelineSyncControlCodec extends StandardMessageCodec {
    public static final TimelineSyncControlCodec INSTANCE = new TimelineSyncControlCodec();
    private TimelineSyncControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TimelineSyncControl {
    @NonNull void syncTimelineToWatchLater();

    /** The codec used by TimelineSyncControl. */
    static MessageCodec<Object> getCodec() {
      return TimelineSyncControlCodec.INSTANCE;
    }

    /** Sets up an instance of `TimelineSyncControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TimelineSyncControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TimelineSyncControl.syncTimelineToWatchLater", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.syncTimelineToWatchLater();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class WorkaroundsControlCodec extends StandardMessageCodec {
    public static final WorkaroundsControlCodec INSTANCE = new WorkaroundsControlCodec();
    private WorkaroundsControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ListWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ListWrapper) {
        stream.write(128);
        writeValue(stream, ((ListWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface WorkaroundsControl {
    @NonNull ListWrapper getNeededWorkarounds();

    /** The codec used by WorkaroundsControl. */
    static MessageCodec<Object> getCodec() {
      return WorkaroundsControlCodec.INSTANCE;
    }

    /** Sets up an instance of `WorkaroundsControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, WorkaroundsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.WorkaroundsControl.getNeededWorkarounds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ListWrapper output = api.getNeededWorkarounds();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AppInstallControlCodec extends StandardMessageCodec {
    public static final AppInstallControlCodec INSTANCE = new AppInstallControlCodec();
    private AppInstallControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return InstallData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ListWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return NumberWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return PbwAppInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return WatchResource.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return WatchappInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else 
      if (value instanceof InstallData) {
        stream.write(129);
        writeValue(stream, ((InstallData) value).toMap());
      } else 
      if (value instanceof ListWrapper) {
        stream.write(130);
        writeValue(stream, ((ListWrapper) value).toMap());
      } else 
      if (value instanceof NumberWrapper) {
        stream.write(131);
        writeValue(stream, ((NumberWrapper) value).toMap());
      } else 
      if (value instanceof PbwAppInfo) {
        stream.write(132);
        writeValue(stream, ((PbwAppInfo) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(133);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
      if (value instanceof WatchResource) {
        stream.write(134);
        writeValue(stream, ((WatchResource) value).toMap());
      } else 
      if (value instanceof WatchappInfo) {
        stream.write(135);
        writeValue(stream, ((WatchappInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppInstallControl {
    void getAppInfo(StringWrapper localPbwUri, Result<PbwAppInfo> result);
    void beginAppInstall(InstallData installData, Result<BooleanWrapper> result);
    void beginAppDeletion(StringWrapper uuid, Result<BooleanWrapper> result);
    void insertAppIntoBlobDb(StringWrapper uuidString, Result<NumberWrapper> result);
    void removeAppFromBlobDb(StringWrapper appUuidString, Result<NumberWrapper> result);
    void removeAllApps(Result<NumberWrapper> result);
    @NonNull void subscribeToAppStatus();
    @NonNull void unsubscribeFromAppStatus();
    void sendAppOrderToWatch(ListWrapper uuidStringList, Result<NumberWrapper> result);

    /** The codec used by AppInstallControl. */
    static MessageCodec<Object> getCodec() {
      return AppInstallControlCodec.INSTANCE;
    }

    /** Sets up an instance of `AppInstallControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppInstallControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.getAppInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper localPbwUriArg = (StringWrapper)args.get(0);
              if (localPbwUriArg == null) {
                throw new NullPointerException("localPbwUriArg unexpectedly null.");
              }
              Result<PbwAppInfo> resultCallback = new Result<PbwAppInfo>() {
                public void success(PbwAppInfo result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAppInfo(localPbwUriArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.beginAppInstall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              InstallData installDataArg = (InstallData)args.get(0);
              if (installDataArg == null) {
                throw new NullPointerException("installDataArg unexpectedly null.");
              }
              Result<BooleanWrapper> resultCallback = new Result<BooleanWrapper>() {
                public void success(BooleanWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.beginAppInstall(installDataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.beginAppDeletion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper uuidArg = (StringWrapper)args.get(0);
              if (uuidArg == null) {
                throw new NullPointerException("uuidArg unexpectedly null.");
              }
              Result<BooleanWrapper> resultCallback = new Result<BooleanWrapper>() {
                public void success(BooleanWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.beginAppDeletion(uuidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.insertAppIntoBlobDb", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper uuidStringArg = (StringWrapper)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.insertAppIntoBlobDb(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.removeAppFromBlobDb", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper appUuidStringArg = (StringWrapper)args.get(0);
              if (appUuidStringArg == null) {
                throw new NullPointerException("appUuidStringArg unexpectedly null.");
              }
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeAppFromBlobDb(appUuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.removeAllApps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeAllApps(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.subscribeToAppStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.subscribeToAppStatus();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.unsubscribeFromAppStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.unsubscribeFromAppStatus();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppInstallControl.sendAppOrderToWatch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ListWrapper uuidStringListArg = (ListWrapper)args.get(0);
              if (uuidStringListArg == null) {
                throw new NullPointerException("uuidStringListArg unexpectedly null.");
              }
              Result<NumberWrapper> resultCallback = new Result<NumberWrapper>() {
                public void success(NumberWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendAppOrderToWatch(uuidStringListArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AppLifecycleControlCodec extends StandardMessageCodec {
    public static final AppLifecycleControlCodec INSTANCE = new AppLifecycleControlCodec();
    private AppLifecycleControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BooleanWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return StringWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BooleanWrapper) {
        stream.write(128);
        writeValue(stream, ((BooleanWrapper) value).toMap());
      } else 
      if (value instanceof StringWrapper) {
        stream.write(129);
        writeValue(stream, ((StringWrapper) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppLifecycleControl {
    void openAppOnTheWatch(StringWrapper uuidString, Result<BooleanWrapper> result);

    /** The codec used by AppLifecycleControl. */
    static MessageCodec<Object> getCodec() {
      return AppLifecycleControlCodec.INSTANCE;
    }

    /** Sets up an instance of `AppLifecycleControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppLifecycleControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppLifecycleControl.openAppOnTheWatch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringWrapper uuidStringArg = (StringWrapper)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<BooleanWrapper> resultCallback = new Result<BooleanWrapper>() {
                public void success(BooleanWrapper result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.openAppOnTheWatch(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PackageDetailsCodec extends StandardMessageCodec {
    public static final PackageDetailsCodec INSTANCE = new PackageDetailsCodec();
    private PackageDetailsCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppEntriesPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppEntriesPigeon) {
        stream.write(128);
        writeValue(stream, ((AppEntriesPigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PackageDetails {
    @NonNull AppEntriesPigeon getPackageList();

    /** The codec used by PackageDetails. */
    static MessageCodec<Object> getCodec() {
      return PackageDetailsCodec.INSTANCE;
    }

    /** Sets up an instance of `PackageDetails` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PackageDetails api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PackageDetails.getPackageList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              AppEntriesPigeon output = api.getPackageList();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ScreenshotsControlCodec extends StandardMessageCodec {
    public static final ScreenshotsControlCodec INSTANCE = new ScreenshotsControlCodec();
    private ScreenshotsControlCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ScreenshotResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ScreenshotResult) {
        stream.write(128);
        writeValue(stream, ((ScreenshotResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ScreenshotsControl {
    void takeWatchScreenshot(Result<ScreenshotResult> result);

    /** The codec used by ScreenshotsControl. */
    static MessageCodec<Object> getCodec() {
      return ScreenshotsControlCodec.INSTANCE;
    }

    /** Sets up an instance of `ScreenshotsControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ScreenshotsControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScreenshotsControl.takeWatchScreenshot", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<ScreenshotResult> resultCallback = new Result<ScreenshotResult>() {
                public void success(ScreenshotResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.takeWatchScreenshot(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AppLogControlCodec extends StandardMessageCodec {
    public static final AppLogControlCodec INSTANCE = new AppLogControlCodec();
    private AppLogControlCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppLogControl {
    @NonNull void startSendingLogs();
    @NonNull void stopSendingLogs();

    /** The codec used by AppLogControl. */
    static MessageCodec<Object> getCodec() {
      return AppLogControlCodec.INSTANCE;
    }

    /** Sets up an instance of `AppLogControl` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppLogControl api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppLogControl.startSendingLogs", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.startSendingLogs();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppLogControl.stopSendingLogs", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stopSendingLogs();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class KeepUnusedHackCodec extends StandardMessageCodec {
    public static final KeepUnusedHackCodec INSTANCE = new KeepUnusedHackCodec();
    private KeepUnusedHackCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PebbleScanDevicePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return WatchResource.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PebbleScanDevicePigeon) {
        stream.write(128);
        writeValue(stream, ((PebbleScanDevicePigeon) value).toMap());
      } else 
      if (value instanceof WatchResource) {
        stream.write(129);
        writeValue(stream, ((WatchResource) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface KeepUnusedHack {
    @NonNull void keepPebbleScanDevicePigeon(PebbleScanDevicePigeon cls);
    @NonNull void keepWatchResource(WatchResource cls);

    /** The codec used by KeepUnusedHack. */
    static MessageCodec<Object> getCodec() {
      return KeepUnusedHackCodec.INSTANCE;
    }

    /** Sets up an instance of `KeepUnusedHack` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, KeepUnusedHack api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.KeepUnusedHack.keepPebbleScanDevicePigeon", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PebbleScanDevicePigeon clsArg = (PebbleScanDevicePigeon)args.get(0);
              if (clsArg == null) {
                throw new NullPointerException("clsArg unexpectedly null.");
              }
              api.keepPebbleScanDevicePigeon(clsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.KeepUnusedHack.keepWatchResource", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              WatchResource clsArg = (WatchResource)args.get(0);
              if (clsArg == null) {
                throw new NullPointerException("clsArg unexpectedly null.");
              }
              api.keepWatchResource(clsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
