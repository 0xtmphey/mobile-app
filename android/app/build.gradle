plugins {
    alias libs.plugins.kapt
    alias libs.plugins.serialization
    alias libs.plugins.android.kotlin
    alias libs.plugins.android.application
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    if (System.getenv("ANDROID_NDK_HOME") != null) {
        ndkPath "$System.env.ANDROID_NDK_HOME"
    }
    compileSdk 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }


    defaultConfig {
        applicationId "io.rebble.cobble"
        minSdkVersion 29
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        android.defaultConfig.vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [
                //pebbleKitProviderAuthority: 'com.getpebble.android.provider.basalt' // This makes the app incompatible with the official Pebble app
                pebbleKitProviderAuthority: 'io.rebble.cobble.provider'
        ]
    }
    signingConfigs {
        release {
            keyAlias = "upload"
            keyPassword = "$System.env.ALIAS_PASSWORD"
            storeFile file("../key.jks")
            storePassword = "$System.env.KEY_PASSWORD"
        }

        nightly {
            keyAlias = "key0"
            keyPassword = "$System.env.ALIAS_PASSWORD"
            storeFile file("../key.jks")
            storePassword = "$System.env.KEY_PASSWORD"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            if ("$System.env.NIGHTLY" == "true") {
                signingConfig signingConfigs.nightly
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }
    namespace 'io.rebble.cobble'
    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-opt-in=kotlin.ExperimentalUnsignedTypes"
        freeCompilerArgs += "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
    }
}

flutter {
    source '../..'
}

def coroutinesVersion = "1.8.1"
def lifecycleVersion = "2.8.2"
def timberVersion = "5.0.1"
def androidxCoreVersion = '1.13.1'
def workManagerVersion = '2.9.0'
def okioVersion = '3.9.0'

def junitVersion = '4.13.2'
def androidxTestVersion = "1.5.0"

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation libs.kotlinx.serialization.json
    implementation libs.libpebblecommon
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"
    implementation "com.squareup.okio:okio:$okioVersion"

    implementation libs.dagger
    implementation project(':pebble_bt_transport')
    implementation project(':shared')
    kapt libs.dagger.compiler

    testImplementation "junit:junit:$junitVersion"

    androidTestImplementation "androidx.test:runner:$androidxTestVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestVersion"
}

android.buildTypes.release.ndk.debugSymbolLevel = 'FULL'
