// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeons.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface StringWrapper ()
+(StringWrapper*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface ListWrapper ()
+(ListWrapper*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface BooleanWrapper ()
+(BooleanWrapper*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NumberWrapper ()
+(NumberWrapper*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface TimelinePinPigeon ()
+(TimelinePinPigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NotificationPigeon ()
+(NotificationPigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PebbleScanDevicePigeon ()
+(PebbleScanDevicePigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface WatchResource ()
+(WatchResource*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface WatchConnectionStatePigeon ()
+(WatchConnectionStatePigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PebbleDevicePigeon ()
+(PebbleDevicePigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PebbleFirmwarePigeon ()
+(PebbleFirmwarePigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AppInstallStatus ()
+(AppInstallStatus*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AppLogEntry ()
+(AppLogEntry*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface InstallData ()
+(InstallData*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PbwAppInfo ()
+(PbwAppInfo*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface WatchappInfo ()
+(WatchappInfo*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface AppEntriesPigeon ()
+(AppEntriesPigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface ScreenshotResult ()
+(ScreenshotResult*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NotifActionExecuteReq ()
+(NotifActionExecuteReq*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface ActionResponsePigeon ()
+(ActionResponsePigeon*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface ActionTrigger ()
+(ActionTrigger*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation StringWrapper
+(StringWrapper*)fromMap:(NSDictionary*)dict {
  StringWrapper* result = [[StringWrapper alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation ListWrapper
+(ListWrapper*)fromMap:(NSDictionary*)dict {
  ListWrapper* result = [[ListWrapper alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation BooleanWrapper
+(BooleanWrapper*)fromMap:(NSDictionary*)dict {
  BooleanWrapper* result = [[BooleanWrapper alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NumberWrapper
+(NumberWrapper*)fromMap:(NSDictionary*)dict {
  NumberWrapper* result = [[NumberWrapper alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation TimelinePinPigeon
+(TimelinePinPigeon*)fromMap:(NSDictionary*)dict {
  TimelinePinPigeon* result = [[TimelinePinPigeon alloc] init];
  result.itemId = dict[@"itemId"];
  if ((NSNull *)result.itemId == [NSNull null]) {
    result.itemId = nil;
  }
  result.parentId = dict[@"parentId"];
  if ((NSNull *)result.parentId == [NSNull null]) {
    result.parentId = nil;
  }
  result.timestamp = dict[@"timestamp"];
  if ((NSNull *)result.timestamp == [NSNull null]) {
    result.timestamp = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.duration = dict[@"duration"];
  if ((NSNull *)result.duration == [NSNull null]) {
    result.duration = nil;
  }
  result.isVisible = dict[@"isVisible"];
  if ((NSNull *)result.isVisible == [NSNull null]) {
    result.isVisible = nil;
  }
  result.isFloating = dict[@"isFloating"];
  if ((NSNull *)result.isFloating == [NSNull null]) {
    result.isFloating = nil;
  }
  result.isAllDay = dict[@"isAllDay"];
  if ((NSNull *)result.isAllDay == [NSNull null]) {
    result.isAllDay = nil;
  }
  result.persistQuickView = dict[@"persistQuickView"];
  if ((NSNull *)result.persistQuickView == [NSNull null]) {
    result.persistQuickView = nil;
  }
  result.layout = dict[@"layout"];
  if ((NSNull *)result.layout == [NSNull null]) {
    result.layout = nil;
  }
  result.attributesJson = dict[@"attributesJson"];
  if ((NSNull *)result.attributesJson == [NSNull null]) {
    result.attributesJson = nil;
  }
  result.actionsJson = dict[@"actionsJson"];
  if ((NSNull *)result.actionsJson == [NSNull null]) {
    result.actionsJson = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.itemId ? self.itemId : [NSNull null]), @"itemId", (self.parentId ? self.parentId : [NSNull null]), @"parentId", (self.timestamp ? self.timestamp : [NSNull null]), @"timestamp", (self.type ? self.type : [NSNull null]), @"type", (self.duration ? self.duration : [NSNull null]), @"duration", (self.isVisible ? self.isVisible : [NSNull null]), @"isVisible", (self.isFloating ? self.isFloating : [NSNull null]), @"isFloating", (self.isAllDay ? self.isAllDay : [NSNull null]), @"isAllDay", (self.persistQuickView ? self.persistQuickView : [NSNull null]), @"persistQuickView", (self.layout ? self.layout : [NSNull null]), @"layout", (self.attributesJson ? self.attributesJson : [NSNull null]), @"attributesJson", (self.actionsJson ? self.actionsJson : [NSNull null]), @"actionsJson", nil];
}
@end

@implementation NotificationPigeon
+(NotificationPigeon*)fromMap:(NSDictionary*)dict {
  NotificationPigeon* result = [[NotificationPigeon alloc] init];
  result.packageId = dict[@"packageId"];
  if ((NSNull *)result.packageId == [NSNull null]) {
    result.packageId = nil;
  }
  result.notifId = dict[@"notifId"];
  if ((NSNull *)result.notifId == [NSNull null]) {
    result.notifId = nil;
  }
  result.appName = dict[@"appName"];
  if ((NSNull *)result.appName == [NSNull null]) {
    result.appName = nil;
  }
  result.tagId = dict[@"tagId"];
  if ((NSNull *)result.tagId == [NSNull null]) {
    result.tagId = nil;
  }
  result.tagName = dict[@"tagName"];
  if ((NSNull *)result.tagName == [NSNull null]) {
    result.tagName = nil;
  }
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.text = dict[@"text"];
  if ((NSNull *)result.text == [NSNull null]) {
    result.text = nil;
  }
  result.category = dict[@"category"];
  if ((NSNull *)result.category == [NSNull null]) {
    result.category = nil;
  }
  result.color = dict[@"color"];
  if ((NSNull *)result.color == [NSNull null]) {
    result.color = nil;
  }
  result.messagesJson = dict[@"messagesJson"];
  if ((NSNull *)result.messagesJson == [NSNull null]) {
    result.messagesJson = nil;
  }
  result.actionsJson = dict[@"actionsJson"];
  if ((NSNull *)result.actionsJson == [NSNull null]) {
    result.actionsJson = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.packageId ? self.packageId : [NSNull null]), @"packageId", (self.notifId ? self.notifId : [NSNull null]), @"notifId", (self.appName ? self.appName : [NSNull null]), @"appName", (self.tagId ? self.tagId : [NSNull null]), @"tagId", (self.tagName ? self.tagName : [NSNull null]), @"tagName", (self.title ? self.title : [NSNull null]), @"title", (self.text ? self.text : [NSNull null]), @"text", (self.category ? self.category : [NSNull null]), @"category", (self.color ? self.color : [NSNull null]), @"color", (self.messagesJson ? self.messagesJson : [NSNull null]), @"messagesJson", (self.actionsJson ? self.actionsJson : [NSNull null]), @"actionsJson", nil];
}
@end

@implementation PebbleScanDevicePigeon
+(PebbleScanDevicePigeon*)fromMap:(NSDictionary*)dict {
  PebbleScanDevicePigeon* result = [[PebbleScanDevicePigeon alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.address = dict[@"address"];
  if ((NSNull *)result.address == [NSNull null]) {
    result.address = nil;
  }
  result.version = dict[@"version"];
  if ((NSNull *)result.version == [NSNull null]) {
    result.version = nil;
  }
  result.serialNumber = dict[@"serialNumber"];
  if ((NSNull *)result.serialNumber == [NSNull null]) {
    result.serialNumber = nil;
  }
  result.color = dict[@"color"];
  if ((NSNull *)result.color == [NSNull null]) {
    result.color = nil;
  }
  result.runningPRF = dict[@"runningPRF"];
  if ((NSNull *)result.runningPRF == [NSNull null]) {
    result.runningPRF = nil;
  }
  result.firstUse = dict[@"firstUse"];
  if ((NSNull *)result.firstUse == [NSNull null]) {
    result.firstUse = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.address ? self.address : [NSNull null]), @"address", (self.version ? self.version : [NSNull null]), @"version", (self.serialNumber ? self.serialNumber : [NSNull null]), @"serialNumber", (self.color ? self.color : [NSNull null]), @"color", (self.runningPRF ? self.runningPRF : [NSNull null]), @"runningPRF", (self.firstUse ? self.firstUse : [NSNull null]), @"firstUse", nil];
}
@end

@implementation WatchResource
+(WatchResource*)fromMap:(NSDictionary*)dict {
  WatchResource* result = [[WatchResource alloc] init];
  result.file = dict[@"file"];
  if ((NSNull *)result.file == [NSNull null]) {
    result.file = nil;
  }
  result.menuIcon = dict[@"menuIcon"];
  if ((NSNull *)result.menuIcon == [NSNull null]) {
    result.menuIcon = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.file ? self.file : [NSNull null]), @"file", (self.menuIcon ? self.menuIcon : [NSNull null]), @"menuIcon", (self.name ? self.name : [NSNull null]), @"name", (self.type ? self.type : [NSNull null]), @"type", nil];
}
@end

@implementation WatchConnectionStatePigeon
+(WatchConnectionStatePigeon*)fromMap:(NSDictionary*)dict {
  WatchConnectionStatePigeon* result = [[WatchConnectionStatePigeon alloc] init];
  result.isConnected = dict[@"isConnected"];
  if ((NSNull *)result.isConnected == [NSNull null]) {
    result.isConnected = nil;
  }
  result.isConnecting = dict[@"isConnecting"];
  if ((NSNull *)result.isConnecting == [NSNull null]) {
    result.isConnecting = nil;
  }
  result.currentWatchAddress = dict[@"currentWatchAddress"];
  if ((NSNull *)result.currentWatchAddress == [NSNull null]) {
    result.currentWatchAddress = nil;
  }
  result.currentConnectedWatch = [PebbleDevicePigeon fromMap:dict[@"currentConnectedWatch"]];
  if ((NSNull *)result.currentConnectedWatch == [NSNull null]) {
    result.currentConnectedWatch = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isConnected ? self.isConnected : [NSNull null]), @"isConnected", (self.isConnecting ? self.isConnecting : [NSNull null]), @"isConnecting", (self.currentWatchAddress ? self.currentWatchAddress : [NSNull null]), @"currentWatchAddress", (self.currentConnectedWatch ? [self.currentConnectedWatch toMap] : [NSNull null]), @"currentConnectedWatch", nil];
}
@end

@implementation PebbleDevicePigeon
+(PebbleDevicePigeon*)fromMap:(NSDictionary*)dict {
  PebbleDevicePigeon* result = [[PebbleDevicePigeon alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.address = dict[@"address"];
  if ((NSNull *)result.address == [NSNull null]) {
    result.address = nil;
  }
  result.runningFirmware = [PebbleFirmwarePigeon fromMap:dict[@"runningFirmware"]];
  if ((NSNull *)result.runningFirmware == [NSNull null]) {
    result.runningFirmware = nil;
  }
  result.recoveryFirmware = [PebbleFirmwarePigeon fromMap:dict[@"recoveryFirmware"]];
  if ((NSNull *)result.recoveryFirmware == [NSNull null]) {
    result.recoveryFirmware = nil;
  }
  result.model = dict[@"model"];
  if ((NSNull *)result.model == [NSNull null]) {
    result.model = nil;
  }
  result.bootloaderTimestamp = dict[@"bootloaderTimestamp"];
  if ((NSNull *)result.bootloaderTimestamp == [NSNull null]) {
    result.bootloaderTimestamp = nil;
  }
  result.board = dict[@"board"];
  if ((NSNull *)result.board == [NSNull null]) {
    result.board = nil;
  }
  result.serial = dict[@"serial"];
  if ((NSNull *)result.serial == [NSNull null]) {
    result.serial = nil;
  }
  result.language = dict[@"language"];
  if ((NSNull *)result.language == [NSNull null]) {
    result.language = nil;
  }
  result.languageVersion = dict[@"languageVersion"];
  if ((NSNull *)result.languageVersion == [NSNull null]) {
    result.languageVersion = nil;
  }
  result.isUnfaithful = dict[@"isUnfaithful"];
  if ((NSNull *)result.isUnfaithful == [NSNull null]) {
    result.isUnfaithful = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.address ? self.address : [NSNull null]), @"address", (self.runningFirmware ? [self.runningFirmware toMap] : [NSNull null]), @"runningFirmware", (self.recoveryFirmware ? [self.recoveryFirmware toMap] : [NSNull null]), @"recoveryFirmware", (self.model ? self.model : [NSNull null]), @"model", (self.bootloaderTimestamp ? self.bootloaderTimestamp : [NSNull null]), @"bootloaderTimestamp", (self.board ? self.board : [NSNull null]), @"board", (self.serial ? self.serial : [NSNull null]), @"serial", (self.language ? self.language : [NSNull null]), @"language", (self.languageVersion ? self.languageVersion : [NSNull null]), @"languageVersion", (self.isUnfaithful ? self.isUnfaithful : [NSNull null]), @"isUnfaithful", nil];
}
@end

@implementation PebbleFirmwarePigeon
+(PebbleFirmwarePigeon*)fromMap:(NSDictionary*)dict {
  PebbleFirmwarePigeon* result = [[PebbleFirmwarePigeon alloc] init];
  result.timestamp = dict[@"timestamp"];
  if ((NSNull *)result.timestamp == [NSNull null]) {
    result.timestamp = nil;
  }
  result.version = dict[@"version"];
  if ((NSNull *)result.version == [NSNull null]) {
    result.version = nil;
  }
  result.gitHash = dict[@"gitHash"];
  if ((NSNull *)result.gitHash == [NSNull null]) {
    result.gitHash = nil;
  }
  result.isRecovery = dict[@"isRecovery"];
  if ((NSNull *)result.isRecovery == [NSNull null]) {
    result.isRecovery = nil;
  }
  result.hardwarePlatform = dict[@"hardwarePlatform"];
  if ((NSNull *)result.hardwarePlatform == [NSNull null]) {
    result.hardwarePlatform = nil;
  }
  result.metadataVersion = dict[@"metadataVersion"];
  if ((NSNull *)result.metadataVersion == [NSNull null]) {
    result.metadataVersion = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.timestamp ? self.timestamp : [NSNull null]), @"timestamp", (self.version ? self.version : [NSNull null]), @"version", (self.gitHash ? self.gitHash : [NSNull null]), @"gitHash", (self.isRecovery ? self.isRecovery : [NSNull null]), @"isRecovery", (self.hardwarePlatform ? self.hardwarePlatform : [NSNull null]), @"hardwarePlatform", (self.metadataVersion ? self.metadataVersion : [NSNull null]), @"metadataVersion", nil];
}
@end

@implementation AppInstallStatus
+(AppInstallStatus*)fromMap:(NSDictionary*)dict {
  AppInstallStatus* result = [[AppInstallStatus alloc] init];
  result.progress = dict[@"progress"];
  if ((NSNull *)result.progress == [NSNull null]) {
    result.progress = nil;
  }
  result.isInstalling = dict[@"isInstalling"];
  if ((NSNull *)result.isInstalling == [NSNull null]) {
    result.isInstalling = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.progress ? self.progress : [NSNull null]), @"progress", (self.isInstalling ? self.isInstalling : [NSNull null]), @"isInstalling", nil];
}
@end

@implementation AppLogEntry
+(AppLogEntry*)fromMap:(NSDictionary*)dict {
  AppLogEntry* result = [[AppLogEntry alloc] init];
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  result.timestamp = dict[@"timestamp"];
  if ((NSNull *)result.timestamp == [NSNull null]) {
    result.timestamp = nil;
  }
  result.level = dict[@"level"];
  if ((NSNull *)result.level == [NSNull null]) {
    result.level = nil;
  }
  result.lineNumber = dict[@"lineNumber"];
  if ((NSNull *)result.lineNumber == [NSNull null]) {
    result.lineNumber = nil;
  }
  result.filename = dict[@"filename"];
  if ((NSNull *)result.filename == [NSNull null]) {
    result.filename = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uuid ? self.uuid : [NSNull null]), @"uuid", (self.timestamp ? self.timestamp : [NSNull null]), @"timestamp", (self.level ? self.level : [NSNull null]), @"level", (self.lineNumber ? self.lineNumber : [NSNull null]), @"lineNumber", (self.filename ? self.filename : [NSNull null]), @"filename", (self.message ? self.message : [NSNull null]), @"message", nil];
}
@end

@implementation InstallData
+(InstallData*)fromMap:(NSDictionary*)dict {
  InstallData* result = [[InstallData alloc] init];
  result.uri = dict[@"uri"];
  if ((NSNull *)result.uri == [NSNull null]) {
    result.uri = nil;
  }
  result.appInfo = [PbwAppInfo fromMap:dict[@"appInfo"]];
  if ((NSNull *)result.appInfo == [NSNull null]) {
    result.appInfo = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uri ? self.uri : [NSNull null]), @"uri", (self.appInfo ? [self.appInfo toMap] : [NSNull null]), @"appInfo", nil];
}
@end

@implementation PbwAppInfo
+(PbwAppInfo*)fromMap:(NSDictionary*)dict {
  PbwAppInfo* result = [[PbwAppInfo alloc] init];
  result.isValid = dict[@"isValid"];
  if ((NSNull *)result.isValid == [NSNull null]) {
    result.isValid = nil;
  }
  result.uuid = dict[@"uuid"];
  if ((NSNull *)result.uuid == [NSNull null]) {
    result.uuid = nil;
  }
  result.shortName = dict[@"shortName"];
  if ((NSNull *)result.shortName == [NSNull null]) {
    result.shortName = nil;
  }
  result.longName = dict[@"longName"];
  if ((NSNull *)result.longName == [NSNull null]) {
    result.longName = nil;
  }
  result.companyName = dict[@"companyName"];
  if ((NSNull *)result.companyName == [NSNull null]) {
    result.companyName = nil;
  }
  result.versionCode = dict[@"versionCode"];
  if ((NSNull *)result.versionCode == [NSNull null]) {
    result.versionCode = nil;
  }
  result.versionLabel = dict[@"versionLabel"];
  if ((NSNull *)result.versionLabel == [NSNull null]) {
    result.versionLabel = nil;
  }
  result.appKeys = dict[@"appKeys"];
  if ((NSNull *)result.appKeys == [NSNull null]) {
    result.appKeys = nil;
  }
  result.capabilities = dict[@"capabilities"];
  if ((NSNull *)result.capabilities == [NSNull null]) {
    result.capabilities = nil;
  }
  result.resources = dict[@"resources"];
  if ((NSNull *)result.resources == [NSNull null]) {
    result.resources = nil;
  }
  result.sdkVersion = dict[@"sdkVersion"];
  if ((NSNull *)result.sdkVersion == [NSNull null]) {
    result.sdkVersion = nil;
  }
  result.targetPlatforms = dict[@"targetPlatforms"];
  if ((NSNull *)result.targetPlatforms == [NSNull null]) {
    result.targetPlatforms = nil;
  }
  result.watchapp = [WatchappInfo fromMap:dict[@"watchapp"]];
  if ((NSNull *)result.watchapp == [NSNull null]) {
    result.watchapp = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isValid ? self.isValid : [NSNull null]), @"isValid", (self.uuid ? self.uuid : [NSNull null]), @"uuid", (self.shortName ? self.shortName : [NSNull null]), @"shortName", (self.longName ? self.longName : [NSNull null]), @"longName", (self.companyName ? self.companyName : [NSNull null]), @"companyName", (self.versionCode ? self.versionCode : [NSNull null]), @"versionCode", (self.versionLabel ? self.versionLabel : [NSNull null]), @"versionLabel", (self.appKeys ? self.appKeys : [NSNull null]), @"appKeys", (self.capabilities ? self.capabilities : [NSNull null]), @"capabilities", (self.resources ? self.resources : [NSNull null]), @"resources", (self.sdkVersion ? self.sdkVersion : [NSNull null]), @"sdkVersion", (self.targetPlatforms ? self.targetPlatforms : [NSNull null]), @"targetPlatforms", (self.watchapp ? [self.watchapp toMap] : [NSNull null]), @"watchapp", nil];
}
@end

@implementation WatchappInfo
+(WatchappInfo*)fromMap:(NSDictionary*)dict {
  WatchappInfo* result = [[WatchappInfo alloc] init];
  result.watchface = dict[@"watchface"];
  if ((NSNull *)result.watchface == [NSNull null]) {
    result.watchface = nil;
  }
  result.hiddenApp = dict[@"hiddenApp"];
  if ((NSNull *)result.hiddenApp == [NSNull null]) {
    result.hiddenApp = nil;
  }
  result.onlyShownOnCommunication = dict[@"onlyShownOnCommunication"];
  if ((NSNull *)result.onlyShownOnCommunication == [NSNull null]) {
    result.onlyShownOnCommunication = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.watchface ? self.watchface : [NSNull null]), @"watchface", (self.hiddenApp ? self.hiddenApp : [NSNull null]), @"hiddenApp", (self.onlyShownOnCommunication ? self.onlyShownOnCommunication : [NSNull null]), @"onlyShownOnCommunication", nil];
}
@end

@implementation AppEntriesPigeon
+(AppEntriesPigeon*)fromMap:(NSDictionary*)dict {
  AppEntriesPigeon* result = [[AppEntriesPigeon alloc] init];
  result.appName = dict[@"appName"];
  if ((NSNull *)result.appName == [NSNull null]) {
    result.appName = nil;
  }
  result.packageId = dict[@"packageId"];
  if ((NSNull *)result.packageId == [NSNull null]) {
    result.packageId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.appName ? self.appName : [NSNull null]), @"appName", (self.packageId ? self.packageId : [NSNull null]), @"packageId", nil];
}
@end

@implementation ScreenshotResult
+(ScreenshotResult*)fromMap:(NSDictionary*)dict {
  ScreenshotResult* result = [[ScreenshotResult alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.imagePath = dict[@"imagePath"];
  if ((NSNull *)result.imagePath == [NSNull null]) {
    result.imagePath = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.imagePath ? self.imagePath : [NSNull null]), @"imagePath", nil];
}
@end

@implementation NotifActionExecuteReq
+(NotifActionExecuteReq*)fromMap:(NSDictionary*)dict {
  NotifActionExecuteReq* result = [[NotifActionExecuteReq alloc] init];
  result.itemId = dict[@"itemId"];
  if ((NSNull *)result.itemId == [NSNull null]) {
    result.itemId = nil;
  }
  result.actionId = dict[@"actionId"];
  if ((NSNull *)result.actionId == [NSNull null]) {
    result.actionId = nil;
  }
  result.responseText = dict[@"responseText"];
  if ((NSNull *)result.responseText == [NSNull null]) {
    result.responseText = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.itemId ? self.itemId : [NSNull null]), @"itemId", (self.actionId ? self.actionId : [NSNull null]), @"actionId", (self.responseText ? self.responseText : [NSNull null]), @"responseText", nil];
}
@end

@implementation ActionResponsePigeon
+(ActionResponsePigeon*)fromMap:(NSDictionary*)dict {
  ActionResponsePigeon* result = [[ActionResponsePigeon alloc] init];
  result.success = dict[@"success"];
  if ((NSNull *)result.success == [NSNull null]) {
    result.success = nil;
  }
  result.attributesJson = dict[@"attributesJson"];
  if ((NSNull *)result.attributesJson == [NSNull null]) {
    result.attributesJson = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.success ? self.success : [NSNull null]), @"success", (self.attributesJson ? self.attributesJson : [NSNull null]), @"attributesJson", nil];
}
@end

@implementation ActionTrigger
+(ActionTrigger*)fromMap:(NSDictionary*)dict {
  ActionTrigger* result = [[ActionTrigger alloc] init];
  result.itemId = dict[@"itemId"];
  if ((NSNull *)result.itemId == [NSNull null]) {
    result.itemId = nil;
  }
  result.actionId = dict[@"actionId"];
  if ((NSNull *)result.actionId == [NSNull null]) {
    result.actionId = nil;
  }
  result.attributesJson = dict[@"attributesJson"];
  if ((NSNull *)result.attributesJson == [NSNull null]) {
    result.attributesJson = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.itemId ? self.itemId : [NSNull null]), @"itemId", (self.actionId ? self.actionId : [NSNull null]), @"actionId", (self.attributesJson ? self.attributesJson : [NSNull null]), @"attributesJson", nil];
}
@end

void PigeonLoggerSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PigeonLogger> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonLogger.v"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api v:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonLogger.d"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api d:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonLogger.i"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api i:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonLogger.w"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api w:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonLogger.e"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api e:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void WorkaroundsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<WorkaroundsControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WorkaroundsControl.getNeededWorkarounds"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        ListWrapper *output = [api getNeededWorkarounds:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void AppLifecycleControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppLifecycleControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppLifecycleControl.openAppOnTheWatch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api openAppOnTheWatch:input completion:^(BooleanWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void BackgroundControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<BackgroundControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.BackgroundControl.notifyFlutterBackgroundStarted"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api notifyFlutterBackgroundStarted:^(NumberWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void BackgroundSetupControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<BackgroundSetupControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.BackgroundSetupControl.setupBackground"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NumberWrapper *input = [NumberWrapper fromMap:message];
        FlutterError *error;
        [api setupBackground:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void AppLogControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppLogControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppLogControl.startSendingLogs"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startSendingLogs:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppLogControl.stopSendingLogs"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopSendingLogs:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ScanCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation ScanCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onScanUpdate:(ListWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ScanCallbacks.onScanUpdate"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onScanStarted:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ScanCallbacks.onScanStarted"
      binaryMessenger:self.binaryMessenger];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onScanStopped:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ScanCallbacks.onScanStopped"
      binaryMessenger:self.binaryMessenger];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end
void IntentControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<IntentControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IntentControl.notifyFlutterReadyForIntents"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api notifyFlutterReadyForIntents:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IntentControl.notifyFlutterNotReadyForIntents"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api notifyFlutterNotReadyForIntents:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IntentControl.waitForBoot"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api waitForBoot:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface NotificationListening ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation NotificationListening
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)handleNotification:(NotificationPigeon*)input completion:(void(^)(TimelinePinPigeon*, NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NotificationListening.handleNotification"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    NSDictionary* outputMap = reply;
    TimelinePinPigeon * output = [TimelinePinPigeon fromMap:outputMap];
    completion(output, nil);
  }];
}
- (void)dismissNotification:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NotificationListening.dismissNotification"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void KeepUnusedHackSetup(id<FlutterBinaryMessenger> binaryMessenger, id<KeepUnusedHack> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.KeepUnusedHack.keepPebbleScanDevicePigeon"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        PebbleScanDevicePigeon *input = [PebbleScanDevicePigeon fromMap:message];
        FlutterError *error;
        [api keepPebbleScanDevicePigeon:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.KeepUnusedHack.keepWatchResource"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        WatchResource *input = [WatchResource fromMap:message];
        FlutterError *error;
        [api keepWatchResource:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface RawIncomingPacketsCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation RawIncomingPacketsCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onPacketReceived:(ListWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.RawIncomingPacketsCallbacks.onPacketReceived"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface PairCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation PairCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onWatchPairComplete:(NumberWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PairCallbacks.onWatchPairComplete"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void PermissionCheckSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PermissionCheck> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionCheck.hasLocationPermission"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api hasLocationPermission:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionCheck.hasCalendarPermission"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api hasCalendarPermission:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionCheck.hasNotificationAccess"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api hasNotificationAccess:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionCheck.hasBatteryExclusionEnabled"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api hasBatteryExclusionEnabled:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ConnectionCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation ConnectionCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onWatchConnectionStateChanged:(WatchConnectionStatePigeon*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ConnectionCallbacks.onWatchConnectionStateChanged"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void DebugControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<DebugControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DebugControl.collectLogs"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api collectLogs:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CalendarCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation CalendarCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)doFullCalendarSync:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CalendarCallbacks.doFullCalendarSync"
      binaryMessenger:self.binaryMessenger];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface AppInstallStatusCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation AppInstallStatusCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onStatusUpdated:(AppInstallStatus*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.AppInstallStatusCallbacks.onStatusUpdated"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void ScanControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ScanControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ScanControl.startBleScan"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startBleScan:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ScanControl.startClassicScan"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startClassicScan:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface IntentCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation IntentCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)openUri:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IntentCallbacks.openUri"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void TimelineControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<TimelineControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TimelineControl.addPin"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        TimelinePinPigeon *input = [TimelinePinPigeon fromMap:message];
        FlutterError *error;
        NumberWrapper *output = [api addPin:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TimelineControl.removePin"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        NumberWrapper *output = [api removePin:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TimelineControl.removeAllPins"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NumberWrapper *output = [api removeAllPins:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void PermissionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PermissionControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionControl.requestLocationPermission"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NumberWrapper *output = [api requestLocationPermission:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionControl.requestCalendarPermission"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NumberWrapper *output = [api requestCalendarPermission:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionControl.requestNotificationAccess"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api requestNotificationAccess:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionControl.requestBatteryExclusion"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api requestBatteryExclusion:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PermissionControl.openPermissionSettings"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api openPermissionSettings:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface AppLogCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation AppLogCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onLogReceived:(AppLogEntry*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.AppLogCallbacks.onLogReceived"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void ConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ConnectionControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConnectionControl.isConnected"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BooleanWrapper *output = [api isConnected:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConnectionControl.disconnect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnect:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConnectionControl.sendRawPacket"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        ListWrapper *input = [ListWrapper fromMap:message];
        FlutterError *error;
        [api sendRawPacket:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConnectionControl.observeConnectionChanges"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api observeConnectionChanges:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConnectionControl.cancelObservingConnectionChanges"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cancelObservingConnectionChanges:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NotificationsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NotificationsControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NotificationsControl.sendTestNotification"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api sendTestNotification:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void RawIncomingPacketsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<RawIncomingPacketsControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.RawIncomingPacketsControl.observeIncomingPackets"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api observeIncomingPackets:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.RawIncomingPacketsControl.cancelObservingIncomingPackets"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api cancelObservingIncomingPackets:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BackgroundAppInstallCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation BackgroundAppInstallCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)beginAppInstall:(InstallData*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.BackgroundAppInstallCallbacks.beginAppInstall"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
- (void)deleteApp:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.BackgroundAppInstallCallbacks.deleteApp"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    completion(nil);
  }];
}
@end
void AppInstallControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppInstallControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.getAppInfo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api getAppInfo:input completion:^(PbwAppInfo *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.beginAppInstall"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        InstallData *input = [InstallData fromMap:message];
        [api beginAppInstall:input completion:^(BooleanWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.beginAppDeletion"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api beginAppDeletion:input completion:^(BooleanWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.insertAppIntoBlobDb"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api insertAppIntoBlobDb:input completion:^(NumberWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.removeAppFromBlobDb"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api removeAppFromBlobDb:input completion:^(NumberWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.removeAllApps"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api removeAllApps:^(NumberWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.subscribeToAppStatus"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api subscribeToAppStatus:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.unsubscribeFromAppStatus"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api unsubscribeFromAppStatus:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppInstallControl.sendAppOrderToWatch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        ListWrapper *input = [ListWrapper fromMap:message];
        [api sendAppOrderToWatch:input completion:^(NumberWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void TimelineSyncControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<TimelineSyncControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TimelineSyncControl.syncTimelineToWatchLater"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api syncTimelineToWatchLater:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void PackageDetailsSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PackageDetails> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PackageDetails.getPackageList"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        AppEntriesPigeon *output = [api getPackageList:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void ScreenshotsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ScreenshotsControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ScreenshotsControl.takeWatchScreenshot"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api takeWatchScreenshot:^(ScreenshotResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NotificationUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NotificationUtils> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NotificationUtils.dismissNotification"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        [api dismissNotification:input completion:^(BooleanWrapper *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NotificationUtils.dismissNotificationWatch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api dismissNotificationWatch:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NotificationUtils.openNotification"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        StringWrapper *input = [StringWrapper fromMap:message];
        FlutterError *error;
        [api openNotification:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NotificationUtils.executeAction"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NotifActionExecuteReq *input = [NotifActionExecuteReq fromMap:message];
        FlutterError *error;
        [api executeAction:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void CalendarControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<CalendarControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CalendarControl.requestCalendarSync"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api requestCalendarSync:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TimelineCallbacks ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation TimelineCallbacks
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)syncTimelineToWatch:(void(^)(NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.TimelineCallbacks.syncTimelineToWatch"
      binaryMessenger:self.binaryMessenger];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)handleTimelineAction:(ActionTrigger*)input completion:(void(^)(ActionResponsePigeon*, NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.TimelineCallbacks.handleTimelineAction"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    NSDictionary* outputMap = reply;
    ActionResponsePigeon * output = [ActionResponsePigeon fromMap:outputMap];
    completion(output, nil);
  }];
}
@end
void UiConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<UiConnectionControl> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UiConnectionControl.connectToWatch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NumberWrapper *input = [NumberWrapper fromMap:message];
        FlutterError *error;
        [api connectToWatch:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UiConnectionControl.unpairWatch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NumberWrapper *input = [NumberWrapper fromMap:message];
        FlutterError *error;
        [api unpairWatch:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
