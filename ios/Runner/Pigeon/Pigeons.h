// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class StringWrapper;
@class ListWrapper;
@class BooleanWrapper;
@class NumberWrapper;
@class TimelinePinPigeon;
@class NotificationPigeon;
@class PebbleScanDevicePigeon;
@class WatchResource;
@class WatchConnectionStatePigeon;
@class PebbleDevicePigeon;
@class PebbleFirmwarePigeon;
@class AppInstallStatus;
@class AppLogEntry;
@class InstallData;
@class PbwAppInfo;
@class WatchappInfo;
@class AppEntriesPigeon;
@class ScreenshotResult;
@class NotifActionExecuteReq;
@class ActionResponsePigeon;
@class ActionTrigger;

@interface StringWrapper : NSObject
@property(nonatomic, copy, nullable) NSString * value;
@end

@interface ListWrapper : NSObject
@property(nonatomic, strong, nullable) NSArray * value;
@end

@interface BooleanWrapper : NSObject
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface NumberWrapper : NSObject
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface TimelinePinPigeon : NSObject
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, copy, nullable) NSString * parentId;
@property(nonatomic, strong, nullable) NSNumber * timestamp;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, strong, nullable) NSNumber * duration;
@property(nonatomic, strong, nullable) NSNumber * isVisible;
@property(nonatomic, strong, nullable) NSNumber * isFloating;
@property(nonatomic, strong, nullable) NSNumber * isAllDay;
@property(nonatomic, strong, nullable) NSNumber * persistQuickView;
@property(nonatomic, strong, nullable) NSNumber * layout;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@property(nonatomic, copy, nullable) NSString * actionsJson;
@end

@interface NotificationPigeon : NSObject
@property(nonatomic, copy, nullable) NSString * packageId;
@property(nonatomic, strong, nullable) NSNumber * notifId;
@property(nonatomic, copy, nullable) NSString * appName;
@property(nonatomic, copy, nullable) NSString * tagId;
@property(nonatomic, copy, nullable) NSString * tagName;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * text;
@property(nonatomic, copy, nullable) NSString * category;
@property(nonatomic, strong, nullable) NSNumber * color;
@property(nonatomic, copy, nullable) NSString * messagesJson;
@property(nonatomic, copy, nullable) NSString * actionsJson;
@end

@interface PebbleScanDevicePigeon : NSObject
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, strong, nullable) NSNumber * address;
@property(nonatomic, copy, nullable) NSString * version;
@property(nonatomic, copy, nullable) NSString * serialNumber;
@property(nonatomic, strong, nullable) NSNumber * color;
@property(nonatomic, strong, nullable) NSNumber * runningPRF;
@property(nonatomic, strong, nullable) NSNumber * firstUse;
@end

@interface WatchResource : NSObject
@property(nonatomic, copy, nullable) NSString * file;
@property(nonatomic, strong, nullable) NSNumber * menuIcon;
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, copy, nullable) NSString * type;
@end

@interface WatchConnectionStatePigeon : NSObject
@property(nonatomic, strong, nullable) NSNumber * isConnected;
@property(nonatomic, strong, nullable) NSNumber * isConnecting;
@property(nonatomic, strong, nullable) NSNumber * currentWatchAddress;
@property(nonatomic, strong, nullable) PebbleDevicePigeon * currentConnectedWatch;
@end

@interface PebbleDevicePigeon : NSObject
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, strong, nullable) NSNumber * address;
@property(nonatomic, strong, nullable) PebbleFirmwarePigeon * runningFirmware;
@property(nonatomic, strong, nullable) PebbleFirmwarePigeon * recoveryFirmware;
@property(nonatomic, strong, nullable) NSNumber * model;
@property(nonatomic, strong, nullable) NSNumber * bootloaderTimestamp;
@property(nonatomic, copy, nullable) NSString * board;
@property(nonatomic, copy, nullable) NSString * serial;
@property(nonatomic, copy, nullable) NSString * language;
@property(nonatomic, strong, nullable) NSNumber * languageVersion;
@property(nonatomic, strong, nullable) NSNumber * isUnfaithful;
@end

@interface PebbleFirmwarePigeon : NSObject
@property(nonatomic, strong, nullable) NSNumber * timestamp;
@property(nonatomic, copy, nullable) NSString * version;
@property(nonatomic, copy, nullable) NSString * gitHash;
@property(nonatomic, strong, nullable) NSNumber * isRecovery;
@property(nonatomic, strong, nullable) NSNumber * hardwarePlatform;
@property(nonatomic, strong, nullable) NSNumber * metadataVersion;
@end

@interface AppInstallStatus : NSObject
@property(nonatomic, strong, nullable) NSNumber * progress;
@property(nonatomic, strong, nullable) NSNumber * isInstalling;
@end

@interface AppLogEntry : NSObject
@property(nonatomic, copy, nullable) NSString * uuid;
@property(nonatomic, strong, nullable) NSNumber * timestamp;
@property(nonatomic, strong, nullable) NSNumber * level;
@property(nonatomic, strong, nullable) NSNumber * lineNumber;
@property(nonatomic, copy, nullable) NSString * filename;
@property(nonatomic, copy, nullable) NSString * message;
@end

@interface InstallData : NSObject
@property(nonatomic, copy, nullable) NSString * uri;
@property(nonatomic, strong, nullable) PbwAppInfo * appInfo;
@end

@interface PbwAppInfo : NSObject
@property(nonatomic, strong, nullable) NSNumber * isValid;
@property(nonatomic, copy, nullable) NSString * uuid;
@property(nonatomic, copy, nullable) NSString * shortName;
@property(nonatomic, copy, nullable) NSString * longName;
@property(nonatomic, copy, nullable) NSString * companyName;
@property(nonatomic, strong, nullable) NSNumber * versionCode;
@property(nonatomic, copy, nullable) NSString * versionLabel;
@property(nonatomic, strong, nullable) NSDictionary * appKeys;
@property(nonatomic, strong, nullable) NSArray * capabilities;
@property(nonatomic, strong, nullable) NSArray * resources;
@property(nonatomic, copy, nullable) NSString * sdkVersion;
@property(nonatomic, strong, nullable) NSArray * targetPlatforms;
@property(nonatomic, strong, nullable) WatchappInfo * watchapp;
@end

@interface WatchappInfo : NSObject
@property(nonatomic, strong, nullable) NSNumber * watchface;
@property(nonatomic, strong, nullable) NSNumber * hiddenApp;
@property(nonatomic, strong, nullable) NSNumber * onlyShownOnCommunication;
@end

@interface AppEntriesPigeon : NSObject
@property(nonatomic, strong, nullable) NSArray * appName;
@property(nonatomic, strong, nullable) NSArray * packageId;
@end

@interface ScreenshotResult : NSObject
@property(nonatomic, strong, nullable) NSNumber * success;
@property(nonatomic, copy, nullable) NSString * imagePath;
@end

@interface NotifActionExecuteReq : NSObject
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, strong, nullable) NSNumber * actionId;
@property(nonatomic, copy, nullable) NSString * responseText;
@end

@interface ActionResponsePigeon : NSObject
@property(nonatomic, strong, nullable) NSNumber * success;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@end

@interface ActionTrigger : NSObject
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, strong, nullable) NSNumber * actionId;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@end

@protocol PigeonLogger
-(void)v:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)d:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)i:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)w:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)e:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PigeonLoggerSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PigeonLogger> _Nullable api);

@protocol WorkaroundsControl
-(nullable ListWrapper *)getNeededWorkarounds:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void WorkaroundsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<WorkaroundsControl> _Nullable api);

@protocol AppLifecycleControl
-(void)openAppOnTheWatch:(nullable StringWrapper *)input completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void AppLifecycleControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppLifecycleControl> _Nullable api);

@protocol BackgroundControl
-(void)notifyFlutterBackgroundStarted:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void BackgroundControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<BackgroundControl> _Nullable api);

@protocol BackgroundSetupControl
-(void)setupBackground:(NumberWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void BackgroundSetupControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<BackgroundSetupControl> _Nullable api);

@protocol AppLogControl
-(void)startSendingLogs:(FlutterError *_Nullable *_Nonnull)error;
-(void)stopSendingLogs:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void AppLogControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppLogControl> _Nullable api);

@interface ScanCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onScanUpdate:(ListWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
- (void)onScanStarted:(void(^)(NSError* _Nullable))completion;
- (void)onScanStopped:(void(^)(NSError* _Nullable))completion;
@end
@protocol IntentControl
-(void)notifyFlutterReadyForIntents:(FlutterError *_Nullable *_Nonnull)error;
-(void)notifyFlutterNotReadyForIntents:(FlutterError *_Nullable *_Nonnull)error;
-(nullable BooleanWrapper *)waitForBoot:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void IntentControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<IntentControl> _Nullable api);

@interface NotificationListening : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)handleNotification:(NotificationPigeon*)input completion:(void(^)(TimelinePinPigeon*, NSError* _Nullable))completion;
- (void)dismissNotification:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol KeepUnusedHack
-(void)keepPebbleScanDevicePigeon:(PebbleScanDevicePigeon*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)keepWatchResource:(WatchResource*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void KeepUnusedHackSetup(id<FlutterBinaryMessenger> binaryMessenger, id<KeepUnusedHack> _Nullable api);

@interface RawIncomingPacketsCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onPacketReceived:(ListWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@interface PairCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onWatchPairComplete:(NumberWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol PermissionCheck
-(nullable BooleanWrapper *)hasLocationPermission:(FlutterError *_Nullable *_Nonnull)error;
-(nullable BooleanWrapper *)hasCalendarPermission:(FlutterError *_Nullable *_Nonnull)error;
-(nullable BooleanWrapper *)hasNotificationAccess:(FlutterError *_Nullable *_Nonnull)error;
-(nullable BooleanWrapper *)hasBatteryExclusionEnabled:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PermissionCheckSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PermissionCheck> _Nullable api);

@interface ConnectionCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onWatchConnectionStateChanged:(WatchConnectionStatePigeon*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol DebugControl
-(void)collectLogs:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void DebugControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<DebugControl> _Nullable api);

@interface CalendarCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)doFullCalendarSync:(void(^)(NSError* _Nullable))completion;
@end
@interface AppInstallStatusCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onStatusUpdated:(AppInstallStatus*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol ScanControl
-(void)startBleScan:(FlutterError *_Nullable *_Nonnull)error;
-(void)startClassicScan:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void ScanControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ScanControl> _Nullable api);

@interface IntentCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)openUri:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol TimelineControl
-(nullable NumberWrapper *)addPin:(TimelinePinPigeon*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(nullable NumberWrapper *)removePin:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(nullable NumberWrapper *)removeAllPins:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void TimelineControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<TimelineControl> _Nullable api);

@protocol PermissionControl
-(nullable NumberWrapper *)requestLocationPermission:(FlutterError *_Nullable *_Nonnull)error;
-(nullable NumberWrapper *)requestCalendarPermission:(FlutterError *_Nullable *_Nonnull)error;
-(void)requestNotificationAccess:(FlutterError *_Nullable *_Nonnull)error;
-(void)requestBatteryExclusion:(FlutterError *_Nullable *_Nonnull)error;
-(void)openPermissionSettings:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PermissionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PermissionControl> _Nullable api);

@interface AppLogCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onLogReceived:(AppLogEntry*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol ConnectionControl
-(nullable BooleanWrapper *)isConnected:(FlutterError *_Nullable *_Nonnull)error;
-(void)disconnect:(FlutterError *_Nullable *_Nonnull)error;
-(void)sendRawPacket:(ListWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)observeConnectionChanges:(FlutterError *_Nullable *_Nonnull)error;
-(void)cancelObservingConnectionChanges:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void ConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ConnectionControl> _Nullable api);

@protocol NotificationsControl
-(void)sendTestNotification:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void NotificationsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NotificationsControl> _Nullable api);

@protocol RawIncomingPacketsControl
-(void)observeIncomingPackets:(FlutterError *_Nullable *_Nonnull)error;
-(void)cancelObservingIncomingPackets:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void RawIncomingPacketsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<RawIncomingPacketsControl> _Nullable api);

@interface BackgroundAppInstallCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)beginAppInstall:(InstallData*)input completion:(void(^)(NSError* _Nullable))completion;
- (void)deleteApp:(StringWrapper*)input completion:(void(^)(NSError* _Nullable))completion;
@end
@protocol AppInstallControl
-(void)getAppInfo:(nullable StringWrapper *)input completion:(void(^)(PbwAppInfo *_Nullable, FlutterError *_Nullable))completion;
-(void)beginAppInstall:(nullable InstallData *)input completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)beginAppDeletion:(nullable StringWrapper *)input completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)insertAppIntoBlobDb:(nullable StringWrapper *)input completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)removeAppFromBlobDb:(nullable StringWrapper *)input completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)removeAllApps:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)subscribeToAppStatus:(FlutterError *_Nullable *_Nonnull)error;
-(void)unsubscribeFromAppStatus:(FlutterError *_Nullable *_Nonnull)error;
-(void)sendAppOrderToWatch:(nullable ListWrapper *)input completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void AppInstallControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<AppInstallControl> _Nullable api);

@protocol TimelineSyncControl
-(void)syncTimelineToWatchLater:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void TimelineSyncControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<TimelineSyncControl> _Nullable api);

@protocol PackageDetails
-(nullable AppEntriesPigeon *)getPackageList:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PackageDetailsSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PackageDetails> _Nullable api);

@protocol ScreenshotsControl
-(void)takeWatchScreenshot:(void(^)(ScreenshotResult *_Nullable, FlutterError *_Nullable))completion;
@end

extern void ScreenshotsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ScreenshotsControl> _Nullable api);

@protocol NotificationUtils
-(void)dismissNotification:(nullable StringWrapper *)input completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
-(void)dismissNotificationWatch:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)openNotification:(StringWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)executeAction:(NotifActionExecuteReq*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void NotificationUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NotificationUtils> _Nullable api);

@protocol CalendarControl
-(void)requestCalendarSync:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void CalendarControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<CalendarControl> _Nullable api);

@interface TimelineCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)syncTimelineToWatch:(void(^)(NSError* _Nullable))completion;
- (void)handleTimelineAction:(ActionTrigger*)input completion:(void(^)(ActionResponsePigeon*, NSError* _Nullable))completion;
@end
@protocol UiConnectionControl
-(void)connectToWatch:(NumberWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)unpairWatch:(NumberWrapper*)input error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void UiConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, id<UiConnectionControl> _Nullable api);

NS_ASSUME_NONNULL_END
